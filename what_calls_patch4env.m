function what_calls_patch4env(Loggers_dir, Date, ExpStartTime, TransferLocal)
if nargin<4
    TransferLocal = 1;
end
% Hard coded parameters for the filtering of the signal and calculations in biosound
F_high_Raw = 50000;
F_low_Raw = 100;
F_high_Piezo = 10000;
F_low_Piezo = 100;

% Set to 1 if you want to manually pause after each vocalization and listen
% to them
ManualPause=0;

% Import biosound library
py.importlib.import_module('soundsig')

% Load data
Data1 = dir(fullfile(Loggers_dir, sprintf('%s_%s_VocExtractDat*.mat', Date, ExpStartTime)));
% select the correct files
Gdf = zeros(length(Data1),1);
for df=1:length(Data1)
    if length(strfind(Data1(df).name, '_'))==2
        Gdf(df)=1;
    end
end

if sum(Gdf)==0
    warning('No vocalization data extracted by who_calls.m or get_logger_data_voc.m')
else
    
    DataFile = dir(fullfile(Loggers_dir, sprintf('%s_%s_VocExtractDat*_*.mat', Date, ExpStartTime)));
    if length(DataFile)~=sum(Gdf)
        warning('The number of files generated by get_logger_data_voc (Data1) is not the same as the number generated by who_calls (DataFile)')
        keyboard
    end
    % Loop through the datafiles
    for df=1:sum(Gdf) %1
        % bringing the file back on the local computer (we're going to write
        % pretty often to it)
        Data1 = dir(fullfile(Loggers_dir, sprintf('%s_%s_VocExtractData%d.mat', Date, ExpStartTime, df)));
        if isempty(Data1)
            Data1 = dir(fullfile(Loggers_dir, sprintf('%s_%s_VocExtractData.mat', Date, ExpStartTime)));
        end
        DataFile = dir(fullfile(Loggers_dir, sprintf('%s_%s_VocExtractData%d_*.mat', Date, ExpStartTime,df)));
        if isempty(DataFile) % who calls was the earlier format
            DataFile = dir(fullfile(Loggers_dir, sprintf('%s_%s_VocExtractData_*.mat', Date, ExpStartTime)));
        end
        fprintf(1,'Set %d/%d\nwith file %s and %s', df, sum(Gdf), Data1.name, DataFile.name)
        if TransferLocal
            WorkDir = ['~' filesep 'WorkingDirectoryWhat'];
            fprintf(1,'Transferring data from the server %s\n on the local computer %s\n', DataFile.folder, WorkDir);
            if ~exist('WorkDir','dir')
                mkdir(WorkDir)
            end
            if ~exist(fullfile(WorkDir, DataFile.name), "file")
                [s,m,e]=copyfile(fullfile(DataFile.folder, DataFile.name), WorkDir, 'f');
                if ~s
                    m %#ok<NOPRT>
                    e %#ok<NOPRT>
                    error('File transfer did not occur correctly for %s\n', fullfile(DataFile.folder, DataFile.name));
                end
            end
            if ~exist(fullfile(WorkDir, Data1.name), "file")
                [s,m,e]=copyfile(fullfile(Data1.folder, Data1.name), WorkDir, 'f');
                if ~s
                    m %#ok<NOPRT>
                    e %#ok<NOPRT>
                    error('File transfer did not occur correctly for %s\n', fullfile(Data1.folder, Data1.name));
                end
            end
        else
            WorkDir = Loggers_dir;
        end
        load(fullfile(WorkDir, DataFile.name), 'IndVocStartRaw_merged', 'IndVocStopRaw_merged', 'IndVocStartPiezo_merged', 'IndVocStopPiezo_merged','IndVocStartPiezo','IndVocStopPiezo','IndVocStartRaw','IndVocStopRaw', 'BatID','LoggerName');
        if ~exist('BatID', 'var')
            Ind_ = strfind(DataFile.name, '_');
             load(fullfile(WorkDir, sprintf('%s_%s_VocExtractData%d%s', Date, ExpStartTime,1, DataFile.name(Ind_(end):end))), 'BatID','LoggerName');
        end
        load(fullfile(WorkDir, Data1.name), 'FS','Piezo_wave','Raw_wave', 'Piezo_FS','VocFilename');
        
        % Number of call sequences with identified vocalizations
        VocInd = find(~cellfun('isempty',IndVocStartRaw_merged));
        VocInd_true = nan(size(VocInd));
        for vvi=1:length(VocInd)
            VocInd_true(vvi) = any(~cellfun('isempty',IndVocStartRaw_merged{VocInd(vvi)}));
        end
        VocInd = VocInd(logical(VocInd_true));
        VocInd2 = find(~cellfun('isempty',IndVocStartPiezo));
        VocInd2_true = nan(size(VocInd2));
        for vvi=1:length(VocInd2)
            VocInd2_true(vvi) = any(~cellfun('isempty',IndVocStartPiezo{VocInd2(vvi)}));
        end
        VocInd2 = VocInd2(logical(VocInd2_true));
        if length(VocInd) ~= length(VocInd2) || any(VocInd~=VocInd2)
%             keyboard % there should be the same sequences labelled as having vocalizationss
            VocInd = intersect(VocInd, VocInd2);
        end
        NV = length(VocInd);
        Fns_AL = fieldnames(Piezo_wave);
    
        % Filter for the Mic signal
        [z,p,k] = butter(6,[F_low_Raw F_high_Raw]/(FS/2),'bandpass');
        sos_band_raw = zp2sos(z,p,k);
    
        % Filter for the Piezo signal
        PFS = round(mean(Piezo_FS.(Fns_AL{1})(:), 'omitnan'));
        [z,p,k] = butter(6,[F_low_Piezo F_high_Piezo]/(PFS/2),'bandpass');
        sos_band_piezo = zp2sos(z,p,k);
        
        % create the output directoty
        Path2Wav = fullfile(Loggers_dir, 'VocExtracts');
        mkdir(Path2Wav);
    
        % Count the number of vocalization cuts for preallocation of space
        VocCall = 0;
        for vv_what=1:NV
            for ll=1:length(IndVocStartRaw_merged{VocInd(vv_what)})
                VocCall = VocCall + length(IndVocStartRaw_merged{VocInd(vv_what)}{ll});
            end
        end
    
        try
            load(fullfile(WorkDir, DataFile.name), 'BioSoundCalls','BioSoundFilenames', 'Ncall');
        catch
            warning(1, 'No previous data, starting from scratch?\n');
            keyboard
        end
        Firstcall = 1;
        NVocFile = 0;
        
        %% Loop through calls, save them as wav files and run biosound
        % Turn off warning notifications for python 2 struct conversion
        warning('off', 'MATLAB:structOnObject')
    
        for vv_what=Firstcall:NV
            if strfind(VocFilename{VocInd(vv_what)}, '/')
                [~,FileVoc]=fileparts(VocFilename{VocInd(vv_what)});
            else
                ParseVocFile = strsplit(VocFilename{VocInd(vv_what)}, '\');
                FileVoc = ParseVocFile{end};
            end
            for ll=1:length(Fns_AL)
                % Logger number
                AL_local = Fns_AL{ll};
                ALNum = AL_local(7:end);
                % ID of the bat
                ALIndex = contains(LoggerName, 'AL') .* contains(LoggerName, ALNum);
                BatID_local =BatID{find(ALIndex)}; %#ok<FNDSB>
                if Ncall(vv_what,ll) ~= length(IndVocStartRaw_merged{VocInd(vv_what)}{ll})
                    warning('Issue with the call counting, does not correspond to previous file counting')
                    keyboard
                end
                if Ncall(vv_what,ll)
                    for nn=1:Ncall(vv_what,ll)
                        NVocFile = NVocFile +1;
                        if (ll>1 && NVocFile~=(sum(sum(Ncall(1:(vv_what-1),:)))+ sum(Ncall(vv_what,1:(ll-1))) + nn)) || ll==1 && NVocFile~=(sum(sum(Ncall(1:(vv_what-1),:))) + nn)
                            warning('Issue with the call counting')
                            keyboard
                        end
                        fprintf(1,'\n\n%d/%d Vocalization\n',NVocFile,VocCall)
                        fprintf(1,'--> Microphone Calculations\n')
                        % Extract the sound of the microphone that
                        % correspond to the data
                        IndOn = IndVocStartRaw_merged{VocInd(vv_what)}{ll}(nn);
                        IndOff = min(length(Raw_wave{VocInd(vv_what)}),IndVocStopRaw_merged{VocInd(vv_what)}{ll}(nn)); % we take the min here as sometimes the rounding procedures gets numbers outisde of wave length
                        Dur = (IndOff-IndOn)/FS;
                        if IndOn>=IndOff || Dur<0.01 % sound too short to be a call
                            warning('Miss-allignement between Microphone and piezo, skip this one for Microphone data\n')
                            %                             keyboard
                        else
                            WL = Raw_wave{VocInd(vv_what)}(IndOn:IndOff);
                            FiltWL = filtfilt(sos_band_raw,1,WL);
                            FiltWL = FiltWL-mean(FiltWL);
                            FiltWL2 = []; % Set default value of WL2 as empty
                            if ~strcmp(BioSoundFilenames{NVocFile,1},fullfile(Path2Wav,sprintf('%s_Bat%d_AL%s_Elmt%d_Raw.wav',FileVoc, BatID_local,ALNum,nn)))
                                warning('Issue with the call order, does not correspond to previous file order')
                                keyboard
                            end
                            if Dur>=0.1
                                % get the onset and offfsets of every
                                % single vocal element OnOffSetsInd
                                OnOffInd = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStopRaw{VocInd(vv_what)}{ll}<=IndOff));
                                if ~OnOffInd
                                    OnOffInd = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStartRaw{VocInd(vv_what)}{ll}<IndOff));
                                end
                                OnOffSetsInd = ([IndVocStartRaw{VocInd(vv_what)}{ll}(OnOffInd)' IndVocStopRaw{VocInd(vv_what)}{ll}(OnOffInd)']-IndOn+1);
                                try
                                    BSC = runBiosound(FiltWL, FS, FiltWL2,OnOffSetsInd);

                                    if isempty(BioSoundCalls{NVocFile,1})
                                        BioSoundCalls{NVocFile,1} = BSC;
                                    else
                                        if any(BSC.hashid ~= BioSoundCalls{NVocFile,1}.hashid) || BSC.rms~=BioSoundCalls{NVocFile,1}.rms
                                            warning('Issue with the sound ID!!')
                                            keyboard
                                        end
                                        BioSoundCalls{NVocFile,1}.amp = BSC.amp;
                                        BioSoundCalls{NVocFile,1}.ampt = BSC.ampt;
                                        BioSoundCalls{NVocFile,1}.maxAmp = BSC.maxAmp;
                                        if isfield(BSC, 'amp_elmts')
                                            BioSoundCalls{NVocFile,1}.amp_elmts = BSC.amp_elmts;
                                            BioSoundCalls{NVocFile,1}.ampt = BSC.ampt_elmts;
                                            BioSoundCalls{NVocFile,1}.maxAmp = BSC.maxAmp_elmts;
                                        end
                                    end
                                catch ME
                                    warning('Issue cannot run biosound the error is:\n%s, skip\n', ME.identifier)
                                    keyboard
                                    continue
                                end
                            else
                                warning('Very Short vocalization, extracting the vocalization in a larger window of 100ms for mps calculations purposes\n')
                                IndOn2 = IndOn - ceil((0.1- Dur)*FS/2);
                                IndOff2 = IndOff + ceil((0.1 - Dur)*FS/2);
                                if IndOn2<0
                                    IndOn2=1;
                                    IndOff2 = IndOff + ceil((0.1 - Dur)*FS) - IndOn;
                                elseif IndOff2>length(Raw_wave{VocInd(vv_what)})
                                    IndOff2 = length(Raw_wave{VocInd(vv_what)});
                                    IndOn2 = IndOn - ceil((0.1 - Dur)*FS) + IndOff2 - IndOff;
                                end
                                if (IndOn2<0) || IndOff2>length(Raw_wave{VocInd(vv_what)})
                                    warning('we cannot get a larger window of 100ms for this one')
                                    keyboard
                                    IndOn2=1;
                                    IndOff2 = length(Raw_wave{VocInd(vv_what)});
                                end
                                WL2 = Raw_wave{VocInd(vv_what)}(IndOn2:IndOff2);
                                WL2 = WL2 - mean(WL2); % center the piezo data around 0
                                if any(abs(WL2)>=1)
                                    WL2 = WL2./max(abs(WL2)); % scale between 0 and 1 if exceeding 1
                                end
                                FiltWL2 = filtfilt(sos_band_raw,1,WL2);
                                % Onset and offset of each sound element
                                % in WL
                                OnOffInd = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStopRaw{VocInd(vv_what)}{ll}<=IndOff));
                                if ~OnOffInd
                                    OnOffInd = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStartRaw{VocInd(vv_what)}{ll}<IndOff));
                                end
                                OnOffSetsInd = ([IndVocStartRaw{VocInd(vv_what)}{ll}(OnOffInd)' IndVocStopRaw{VocInd(vv_what)}{ll}(OnOffInd)']-IndOn+1);

                                % Onset and offset of each sound element
                                % in WL2
                                OnOffInd2 = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn2) .* (IndVocStopRaw{VocInd(vv_what)}{ll}<=IndOff2));
                                if ~OnOffInd2
                                    OnOffInd2 = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn2) .* (IndVocStartRaw{VocInd(vv_what)}{ll}<IndOff2));
                                end

                                OnOffSetsInd2 = ([IndVocStartRaw{VocInd(vv_what)}{ll}(OnOffInd2)' IndVocStopRaw{VocInd(vv_what)}{ll}(OnOffInd2)']-IndOn2+1);
                                try
                                    BSC = runBiosound(FiltWL, FS, FiltWL2,OnOffSetsInd, OnOffSetsInd2);
                                    
                                    if isempty(BioSoundCalls{NVocFile,1})
                                        BioSoundCalls{NVocFile,1} = BSC;
                                    else
                                        if any(BSC.hashid ~= BioSoundCalls{NVocFile,1}.hashid) || BSC.rms~=BioSoundCalls{NVocFile,1}.rms
                                            warning('Issue with the sound ID!!')
                                            keyboard
                                        end
                                        BioSoundCalls{NVocFile,1}.amp = BSC.amp;
                                        BioSoundCalls{NVocFile,1}.ampt = BSC.ampt;
                                        BioSoundCalls{NVocFile,1}.maxAmp = BSC.maxAmp;
                                        if isfield(BSC, 'amp_elmts')
                                            BioSoundCalls{NVocFile,1}.amp_elmts = BSC.amp_elmts;
                                            BioSoundCalls{NVocFile,1}.ampt = BSC.ampt_elmts;
                                            BioSoundCalls{NVocFile,1}.maxAmp = BSC.maxAmp_elmts;
                                        end
                                    end
                                catch ME
                                    warning('Issue cannot run biosound the error is:\n%s, skip\n', ME.identifier)
                                    keyboard
                                    continue
                                end
                            end
                            
                            % Play the sound
                            if ManualPause
                                % Plot figures of biosound results for Microphone data
                                figure(1);
                                clf
                                plotBiosound(BioSoundCalls{NVocFile,1}, F_high_Raw, FiltWL2)
                                hold on
                                suplabel(sprintf('%d/%d Vocalization',NVocFile,VocCall),'t');
                                hold off
                                AP=audioplayer(FiltWL./(max(abs(FiltWL))),FS); %#ok<UNRCH,TNMLP>
                                play(AP)
                            end
                            %                                     print(Fig1,fullfile(Path2Wav,sprintf('%s_Bat%d_AL%s_Elmt%d_Raw.pdf', FileVoc, BatID_local,ALNum,nn)),'-dpdf','-fillpage')
                        end
                        % Extract the sound of the audio-logger that
                        % correspond to the data
                        fprintf(1,'--> Piezo Calculations\n')
                        IndOn = IndVocStartPiezo_merged{VocInd(vv_what)}{ll}(nn);
                        IndOff = min(IndVocStopPiezo_merged{VocInd(vv_what)}{ll}(nn), length(Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)}));
                        FSpiezo = round(Piezo_FS.(Fns_AL{ll})(VocInd(vv_what)));
                        if isnan(FSpiezo)
                            FSpiezo = round(mean(Piezo_FS.(Fns_AL{ll})(:), 'omitnan'));
                        end
                        Dur = (IndOff-IndOn)/FSpiezo;
                        if IndOn>=IndOff || Dur<0.01 % sound too short to be a call
%                             keyboard
                            warning('Miss-allignement between Microphone and piezo, skip this one for Piezo data\n')
                        else
                            WL = Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)}(IndOn:IndOff);
                            WL = WL - mean(WL); % center the piezo data around 0
                            if any(abs(WL)>=1)
                                WL = WL./max(abs(WL)); % scale between 0 and 1 if exceeding 1
                            end
                            FiltWL = filtfilt(sos_band_piezo,1,WL);
                            if ~strcmp(BioSoundFilenames{NVocFile,2}, fullfile(Path2Wav,sprintf('%s_Bat%d_AL%s_Elmt%d_Piezo.wav',FileVoc,BatID_local,ALNum,nn)))
                                warning('error of file order')
                                keyboard
                                if isempty(BioSoundFilenames{NVocFile,2})
                                    BioSoundFilenames{NVocFile,2}=fullfile(Path2Wav,sprintf('%s_Bat%d_AL%s_Elmt%d_Piezo.wav',FileVoc,BatID_local,ALNum,nn));
                                end
                            end
                            FiltWL2 = [];
                            if Dur>=0.1
                                % get the onset and offfsets of every
                                % single vocal element OnOffSetsInd
                                OnOffInd = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStopPiezo{VocInd(vv_what)}{ll}<=IndOff));
                                if ~OnOffInd
                                    OnOffInd = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStartPiezo{VocInd(vv_what)}{ll}<IndOff));
                                end
                                OnOffSetsInd = ([IndVocStartPiezo{VocInd(vv_what)}{ll}(OnOffInd)' IndVocStopPiezo{VocInd(vv_what)}{ll}(OnOffInd)']-IndOn+1);
                                BSC = runBiosound(FiltWL, FSpiezo, [], OnOffSetsInd);
                                
                                if isempty(BioSoundCalls{NVocFile,2})
                                    BioSoundCalls{NVocFile,2} = BSC;
                                else
                                    if any(BSC.hashid ~= BioSoundCalls{NVocFile,2}.hashid) || BSC.rms~=BioSoundCalls{NVocFile,2}.rms
                                        warning('Issue with the sound ID!!')
                                        keyboard
                                    end
                                    BioSoundCalls{NVocFile,2}.amp = BSC.amp;
                                    BioSoundCalls{NVocFile,2}.ampt = BSC.ampt;
                                    BioSoundCalls{NVocFile,2}.maxAmp = BSC.maxAmp;
                                    if isfield(BSC, 'amp_elmts')
                                        BioSoundCalls{NVocFile,2}.amp_elmts = BSC.amp_elmts;
                                        BioSoundCalls{NVocFile,2}.ampt_elmts = BSC.ampt_elmts;
                                        BioSoundCalls{NVocFile,2}.maxAmp_elmts = BSC.maxAmp_elmts;
                                    end
                                end
                            else
                                warning('Very Short vocalization, extracting the vocalization in a larger window of 100ms for mps calculations purposes\n')
                                IndOn2 = IndOn - ceil((0.1 - Dur)*FSpiezo/2);
                                IndOff2 = IndOff + ceil((0.1 - Dur)*FSpiezo/2);
                                if IndOn2<0
                                    IndOn2=1;
                                    IndOff2 = IndOff + ceil((0.1 - Dur)*FSpiezo) - IndOn;
                                elseif IndOff2>length(Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)})
                                    IndOff2 = length(Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)});
                                    IndOn2 = IndOn - ceil((0.1 - Dur)*FSpiezo) + IndOff2 - IndOff;
                                end
                                if (IndOn2<0) || IndOff2>length(Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)})
                                    warning('we cannot get a larger window of 100ms for this one')
                                    keyboard
                                    IndOn2=1;
                                    IndOff2 = length(Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)});
                                end
                                WL2 = Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)}(IndOn2:IndOff2);
                                WL2 = WL2 - mean(WL2); % center the piezo data around 0
                                if any(abs(WL2)>=1)
                                    WL2 = WL2./max(abs(WL2)); % scale between 0 and 1 if exceeding 1
                                end
                                FiltWL2 = filtfilt(sos_band_piezo,1,WL2);
                                % Onset and offset of each sound element
                                % in WL
                                OnOffInd = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStopPiezo{VocInd(vv_what)}{ll}<=IndOff));
                                if ~OnOffInd
                                    OnOffInd = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStartPiezo{VocInd(vv_what)}{ll}<IndOff));
                                end
                                OnOffSetsInd = ([IndVocStartPiezo{VocInd(vv_what)}{ll}(OnOffInd)' IndVocStopPiezo{VocInd(vv_what)}{ll}(OnOffInd)']-IndOn+1);
                                
                                % Onset and offset of each sound element
                                % in WL2
                                OnOffInd2 = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn2) .* (IndVocStopPiezo{VocInd(vv_what)}{ll}<=IndOff2));
                                if ~OnOffInd2
                                    OnOffInd2 = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn2) .* (IndVocStartPiezo{VocInd(vv_what)}{ll}<IndOff2));
                                end
                                OnOffSetsInd2 = ([IndVocStartPiezo{VocInd(vv_what)}{ll}(OnOffInd2)' IndVocStopPiezo{VocInd(vv_what)}{ll}(OnOffInd2)']-IndOn2+1);
                                
                                BSC = runBiosound(FiltWL, FSpiezo, FiltWL2, OnOffSetsInd,OnOffSetsInd2);
                                
                                if isempty(BioSoundCalls{NVocFile,2})
                                    BioSoundCalls{NVocFile,2} = BSC;
                                else
                                    if any(BSC.hashid ~= BioSoundCalls{NVocFile,2}.hashid) || BSC.rms~=BioSoundCalls{NVocFile,2}.rms
                                        warning('Issue with the sound ID!!')
                                        keyboard
                                    end
                                    BioSoundCalls{NVocFile,2}.amp = BSC.amp;
                                    BioSoundCalls{NVocFile,2}.ampt = BSC.ampt;
                                    BioSoundCalls{NVocFile,2}.maxAmp = BSC.maxAmp;
                                    if isfield(BSC, 'amp_elmts')
                                        BioSoundCalls{NVocFile,2}.amp_elmts = BSC.amp_elmts;
                                        BioSoundCalls{NVocFile,2}.ampt_elmts = BSC.ampt_elmts;
                                        BioSoundCalls{NVocFile,2}.maxAmp_elmts = BSC.maxAmp_elmts;
                                    end
                                end
                                
                            end
                            
                            % Play the sound
                            if ManualPause
                                % Plot figures of biosound results for piezo data
                                figure(2);
                                clf
                                plotBiosound(BioSoundCalls{NVocFile,2}, F_high_Piezo,FiltWL2,0)
                                hold on
                                suplabel(sprintf('%d/%d Vocalization',NVocFile,VocCall), 't');
                                hold off
                                AP=audioplayer(WL,FSpiezo); %#ok<UNRCH,TNMLP>
                                play(AP)
                            end
                            %                                 print(Fig2,fullfile(Path2Wav,sprintf('%s_Bat%d_AL%s_Elmt%d_Piezo.pdf', FileVoc, BatID_local,ALNum,nn)),'-dpdf','-fillpage')

                        end
                        
                        pause(0.001)
                    end
                end
            end
        
            % save the values!
            save(fullfile(WorkDir, DataFile.name), 'BioSoundCalls','-append');
            
        end
        
        clear BioSoundCalls
   
        % Turn off warning notifications for python 2 struct conversion
        warning('on', 'MATLAB:structOnObject')
        
        if TransferLocal
            % Transfer data back on the server
            fprintf(1,'Transferring data from the local computer %s\n back on the server %s\n', WorkDir, DataFile.folder);
            [s,m,e]=copyfile(fullfile(WorkDir, DataFile.name), DataFile.folder, 'f');
            if ~s
                TicTransfer = tic;
                while toc(TicTransfer)<30*60
                    [s,m,e]=copyfile(fullfile(WorkDir, DataFile.name), DataFile.folder, 'f');
                    if s
                        return
                    end
                end
                if ~s
                    s %#ok<NOPRT>
                    m %#ok<NOPRT>
                    e %#ok<NOPRT>
                    error('File transfer did not occur correctly for %s\n Although we tried for 30min\n', DataFile.folder);
                else
                    fprintf('Data transfered back on server in:\n%s\n',  DataFile.folder);
                    delete(fullfile(WorkDir, DataFile.name));
                end
            else
                fprintf('Data transfered back on server in:\n%s\n',  DataFile.folder);
                delete(fullfile(WorkDir, DataFile.name));
            end
        end
    end
%     if TransferLocal
%         if s  %erase local data
%             [sdel,mdel,edel]=rmdir(WorkDir, 's');
%             if ~sdel
%                 TicErase = tic;
%                 while toc(TicErase)<30*60
%                     [sdel,mdel,edel]=rmdir(WorkDir, 's');
%                     if sdel
%                         return
%                     end
%                 end
%             end
%             if ~sdel
%                 sdel %#ok<NOPRT>
%                 mdel %#ok<NOPRT>
%                 edel %#ok<NOPRT>
%                 error('File erase did not occur correctly for %s\n Although we tried for 30min\n', WorkDir);
%             end
%         end
%     end
end

%% Internal functions


    function BioSoundObj = runBiosound(Y, FS, Y2,OnOffSetsInd,OnOffSetsInd2)
        if nargin<5
            OnOffSetsInd2=nan;
        end
        if nargin<4
            OnOffSetsInd=nan;
        end
        if nargin<3 || isempty(Y2)
            Y2=nan;
        end
        
        % Hard coded parameters for biosound
        % temporal enveloppe parameters
        Cutoff_freq = 150; % Hz
        Amp_sample_rate = 1000; % Hz
        fprintf(1, 'running Biosound env Calculations\n')
       
        
        % create the biosound object
        BiosoundObj = py.soundsig.sound.BioSound(py.numpy.array(Y),pyargs('fs',FS));
        
        % methods(BiosoundFi, '-full') % this command plot all the methods with the available arguments
        
        % Calculate the RMS (lhs std(varargin))
        BioSoundObj.rms = BiosoundObj.sound.std();
        
        % calculate the amplitude enveloppe
        ampenv(BiosoundObj, Cutoff_freq,Amp_sample_rate);
        
        % Store data for the amplitude envelope of the whole sound
        BioSoundObj.amp = double(py.array.array('d', py.numpy.nditer(BiosoundObj.amp)));
        BioSoundObj.ampt = double(BiosoundObj.tAmp);
        BioSoundObj.maxAmp = double(BiosoundObj.maxAmp);
        
         % if there are several sound elements in the section, then obtain
        % statistics of the amplitude envelope, spectral envelope and MPS for
        % each. The sound elements have to be 50ms appart and are isolated
        % in 100ms window if they are shorter than 100ms
        if ~isnan(Y2) % if a longer version of the data is provided, use that!
            OnOffSetsInd_local = OnOffSetsInd2;
            Y_local = Y2;
        else
            OnOffSetsInd_local = OnOffSetsInd;
            Y_local = Y;
        end

        if size(OnOffSetsInd_local,1)>1 && any(((OnOffSetsInd_local(2:end,1) - OnOffSetsInd_local(1:end-1,2))./FS*1000)>50)
            ICI = ( OnOffSetsInd_local(2:end,1) - OnOffSetsInd_local(1:end-1,2))./FS*1000;
            ICILarge = find(ICI>50);
            BioSoundObj.amp_elmts = cell(length(ICILarge)+1,1);
            BioSoundObj.ampt_elmts = cell(length(ICILarge)+1,1);
            BioSoundObj.maxAmp_elmts = nan(length(ICILarge)+1,1);
            Onset_local = nan(length(ICILarge)+1,1);
            Offset_local = nan(length(ICILarge)+1,1);
            for bo=1:(length(ICILarge)+1)
                if bo==1
                    Onset_local(bo) = OnOffSetsInd_local(1,1);
                    Offset_local(bo) = OnOffSetsInd_local(ICILarge(bo),2);
                elseif bo<=length(ICILarge)
                    Onset_local(bo) = OnOffSetsInd_local(ICILarge(bo-1)+1,1);
                    Offset_local(bo) = OnOffSetsInd_local(ICILarge(bo),2);
                elseif bo>length(ICILarge) % This is the last call
                    Onset_local(bo) = OnOffSetsInd_local(ICILarge(bo-1)+1,1);
                    Offset_local(bo) = OnOffSetsInd_local(end,2);
                else
                    warning('We should not end up there!!')
                    keyboard
                end
                Ybo = Y_local(Onset_local(bo):Offset_local(bo));
                BO = py.soundsig.sound.BioSound(py.numpy.array(Ybo),pyargs('fs',FS));
                % Calculate the amplitude envelope and its momentums
                ampenv(BO, Cutoff_freq,Amp_sample_rate);
                BioSoundObj.amp_elmts{bo} = double(py.array.array('d', py.numpy.nditer(BO.amp)));
                BioSoundObj.ampt_elmts{bo} = double(BO.tAmp);
                BioSoundObj.maxAmp_elmts(bo) = double(BO.maxAmp);
            end
            BioSoundObj.OnOffSets_elmts = [Onset_local Offset_local];
        end


       
        
        % Add some fields to our output
        BioSoundObj.samprate = double(BiosoundObj.samprate);
        
        BioSoundObj.hashid = double(BiosoundObj.hashid);
    end

    function plotBiosound(BiosoundObj, F_high, Sound2,FormantPlot)
        if nargin<3
            Sound2 = []; % when the time window for analysis is enlarged to calculate the MPS
        end
        if nargin<4
            FormantPlot=1;
        end
        % Plot the results of biosound calculations
        ss1 = subplot(3,1,1);
        ColorCode = get(groot,'DefaultAxesColorOrder');
        DBNOISE =50;
        f_low = 0;
        logB = BiosoundObj.spectro;
        maxB = max(max(logB));
        minB = maxB-DBNOISE;
        
        imagesc(double(BiosoundObj.to)*1000,double(BiosoundObj.fo),logB);          % to is in seconds
        axis xy;
        caxis('manual');
        caxis([minB maxB]);
        cmap = spec_cmap();
        colormap(cmap);
        %         colorbar()
        
        v_axis = axis;
        v_axis(3)=f_low;
        v_axis(4)=F_high;
        axis(v_axis);
        xlabel('time (ms)'), ylabel('Frequency');
        
        hold on
        plot(double(BiosoundObj.to)*1000,double(BiosoundObj.SpectralMean),'k-','LineWidth',2)
        hold on
        plot(double(BiosoundObj.to)*1000,double(BiosoundObj.Q2t),'Color',ColorCode(6,:),'LineWidth',2)
        
        % Plot the fundamental and formants if they were calculated
        %     if double(BiosoundFi.sal)>MinSaliency
        Legend = {sprintf('SpecMean %.1fHz', mean(double(BiosoundObj.SpectralMean), 'omitnan')) sprintf('SpecMed %.1fHz',mean(double(BiosoundObj.Q2t), 'omitnan'))  sprintf('F0 %.1fHz', mean(double(BiosoundObj.f0),'omitnan')) 'Formant1' 'Formant2' 'Formant3'};
        IndLegend = [1 2];
        if ~isempty(double(BiosoundObj.f0))
            hold on
            plot(double(BiosoundObj.to)*1000,double(BiosoundObj.f0),'r-','LineWidth',2)
            IndLegend = [IndLegend 3];
        end
        if FormantPlot
            hold on
            plot(double(BiosoundObj.to)*1000,double(BiosoundObj.F1),'Color',ColorCode(4,:),'LineWidth',2)
            hold on
            plot(double(BiosoundObj.to)*1000,double(BiosoundObj.F2),'Color',ColorCode(2,:),'LineWidth',2)
            hold on
            if any(~isnan(double(BiosoundObj.F3)))
                plot(double(BiosoundObj.to)*1000,double(BiosoundObj.F3),'Color',ColorCode(7,:),'LineWidth',2)
                IndLegend = [IndLegend 4:6];
            else
                IndLegend = [IndLegend 4:5];
            end
        end
        
        yyaxis right
        hold on
        plot(double(BiosoundObj.to)*1000,double(BiosoundObj.sal),'m-','LineWidth',2)
        legend([Legend(IndLegend) sprintf('Pitch Sal %.2f', mean(double(BiosoundObj.sal), 'omitnan'))], 'Location','southoutside','NumColumns',length(IndLegend)+1)
%         hold on
%         plot(double(BiosoundObj.to)*1000,double(BiosoundObj.sal2),'m--','LineWidth',2)
        ylabel('Pitch Saliency')
        ylim([0 1])
        ss1.YColor = 'm';
        hold off
        
        ss2=subplot(3,1,2);
        yyaxis left
%         if ~isempty(Sound2)
%             Sound = Sound2;
%         else
            Sound = double(BiosoundObj.sound);
%         end
        plot((1:length(Sound))/BiosoundObj.samprate*1000,Sound, 'k-','LineWidth',2)
        hold on
        YLIM = get(gca,'YLim');
        YLIM = max(abs(YLIM)).*[-1 1];
        set(gca, 'YLim', YLIM)
        SoundAmp = double(py.array.array('d', py.numpy.nditer(BiosoundObj.amp)));
        ss2.YColor = 'k';
         % Plot the onsets and offsets of each sound element according to
        % Piezo manual curation
        if isfield(BiosoundObj, 'OnOffSets_elmts')
            for Ne = 1:size(BiosoundObj.OnOffSets_elmts,1)
                ColorInd = rem(Ne,size(ColorCode,1));
                if ColorInd==0
                    ColorInd = size(ColorCode,1);
                end
                MaxX = min(length(Sound),BiosoundObj.OnOffSets_elmts(Ne,2));
                plot((BiosoundObj.OnOffSets_elmts(Ne,1):MaxX)/BiosoundObj.samprate*1000,Sound(BiosoundObj.OnOffSets_elmts(Ne,1):MaxX),'LineStyle','-','LineWidth',2,'Color',ColorCode(ColorInd,:), 'DisplayName',sprintf('Elmt %d',Ne))
            end
            legend('AutoUpdate', 'Off')
        end
        
        yyaxis right
        plot(double(BiosoundObj.tAmp)*1000,double(SoundAmp), 'r-', 'LineWidth',2)
        YLIM = get(gca,'YLim');
        YLIM = max(abs(YLIM)).*[-1 1];
        set(gca, 'YLim', YLIM)
        set(gca, 'XLim', v_axis(1:2))
        xlabel('Time (ms)')
        ylabel('sound amplitude')
        if ~isempty(Sound2)
            title(sprintf('AmpPeriodicity = %.3f AmpPF = %.1f Hz  Note: Sound enlarged for MPS calculations',BiosoundObj.AmpPeriodP, BiosoundObj.AmpPeriodF))
        else
            title(sprintf('AmpPeriodicity = %.3f AmpPF = %.1f Hz',BiosoundObj.AmpPeriodP, BiosoundObj.AmpPeriodF))
        end
        ss2.YColor = 'r';
        hold off

        subplot(3,1,3);
        DBNOISE=60;
        YLim = [0 max(BiosoundObj.wf*10^3)];
%         XLim = [min(BiosoundObj.wt) max(BiosoundObj.wt)];
        XLim = [-300 300];
        Wf_i = logical((BiosoundObj.wf*10^3>=YLim(1)).* (BiosoundObj.wf*10^3<=YLim(2)));
        Wt_i = logical((BiosoundObj.wt>=XLim(1)).* (BiosoundObj.wt<=XLim(2)));
        BiosoundObj.mps = BiosoundObj.mps(Wf_i, Wt_i);
        Wf_local = BiosoundObj.wf(Wf_i);
        Wt_local = BiosoundObj.wt(Wt_i);
        MPS4plot = 10*log10(BiosoundObj.mps);
        MaxMPS = max(max(MPS4plot));
        MinMPS = MaxMPS-DBNOISE;
        MPS4plot(MPS4plot < MinMPS) = MinMPS;
        Im = imagesc(MPS4plot);
        axis xy
        colormap(Im.Parent,'jet');
        colorbar()
        xlabel('Temporal Frequency (Hz)')
        ylabel('Spectral Frequency (Cycles/kHz)')
        % get nice X and y tick labels
        MaxWf = max(floor(Wf_local*10^3));
        YTickLabel=0:MaxWf;
        YTick = nan(length(YTickLabel),1);
        for yy=1:length(YTick)
            YTick(yy) = find(floor(Wf_local*10^3)==YTickLabel(yy),1);
        end
        set(gca, 'YTickLabel', YTickLabel, 'YTick', YTick)
        MaxWt = max(floor(Wt_local*10^-2))*10^2;
        XTickLabel = -MaxWt:100:MaxWt;
        XTick = nan(length(XTickLabel),1);
        for xx=1:length(XTick)
            [~,XTick(xx)] = min(abs(round(Wt_local)-XTickLabel(xx)));
        end
        set(gca, 'XTickLabel',XTickLabel, 'XTick', XTick)
    end


    function plotCallDynamic(BiosoundRaw, BiosoundPiezo) %#ok<DEFNU> 
        Span = 9;% Span is an unevennumber. smooth has a default span of 5 points = 5ms However end points are unchanged...
        HalfSpan = (Span-1)/2;
        % Plot the pitch saliency vs amplitude on microphone
        subplot(4,1,1)
        Saliency = mysmooth(double(BiosoundRaw.sal), Span);
        TimeSound = double(BiosoundRaw.to)*1000;
        TimeSound = TimeSound./max(TimeSound);
        cmap = colormap('jet');
        ncolors = length(cmap);
        nx = length(Saliency);
        
        for ii=HalfSpan:nx-HalfSpan
            segcolor = cmap(fix((TimeSound(ii)+TimeSound(ii+1))*ncolors./3)+1,:);
            plot([Saliency(ii), Saliency(ii+1)], [BiosoundRaw.amp(ii), BiosoundRaw.amp(ii+1)], "Color",segcolor, "LineWidth",2);
            hold on;
        end
        set(gca,'XLim',[0 1]);
        xlabel(sprintf('Pitch Saliency %.1f', double(BiosoundRaw.meansal)))
        ylabel('Amplitude')
        
        % Plot the difference of formants (Mic data) vs sound amplitude (Mic
        % Data)
        subplot(4,1,2)
        SoundSpeed = 350;
        F1 = double(BiosoundRaw.F1);
        F2 = double(BiosoundRaw.F2);
        FormantDisp = mysmooth(SoundSpeed./(2*(F2 - F1))*1000, Span);
        nx = length(FormantDisp);
        
        
        for ii=HalfSpan:nx-HalfSpan
            segcolor = cmap(fix((TimeSound(ii)+TimeSound(ii+1))*ncolors./3)+1,:);
            plot([FormantDisp(ii), FormantDisp(ii+1)], [BiosoundRaw.amp(ii), BiosoundRaw.amp(ii+1)], "Color",segcolor, "LineWidth",2);
            hold on;
        end
        set(gca,'XLim',[10 150])
        xlabel('1/Formant disp (vocal tract length (mm))')
        ylabel('Amplitude')
        
        % Plot the amplitude (Mic data) vs fundamental (Piezo
        % Data)
        subplot(4,1,3)
        SoundFund = mysmooth(double(BiosoundPiezo.f0), Span);
        if ~isempty(SoundFund)
            for ii=HalfSpan:nx-HalfSpan
                segcolor = cmap(fix((TimeSound(ii)+TimeSound(ii+1))*ncolors./3)+1,:);
                plot([SoundFund(ii), SoundFund(ii+1)], [BiosoundRaw.amp(ii), BiosoundRaw.amp(ii+1)], "Color",segcolor, "LineWidth",2);
                hold on;
            end
            ylabel('Amplitude')
            xlabel(sprintf('Fundamental (Hz), %.1f Hz', mean(double(BiosoundPiezo.f0), 'omitnan')))
            set(gca,'XLim',[200 3000])
        end
        
        % Plot the Amplitude (Mic data) vs SpectralMean (Mic
        % Data)
        subplot(4,1,4)
        SoundSpecMean = mysmooth(double(BiosoundRaw.SpectralMean), Span);
        if ~isempty(SoundSpecMean)
            for ii=HalfSpan:nx-HalfSpan
                segcolor = cmap(fix((TimeSound(ii)+TimeSound(ii+1))*ncolors./3)+1,:);
                plot([SoundSpecMean(ii), SoundSpecMean(ii+1)], [BiosoundRaw.amp(ii), BiosoundRaw.amp(ii+1)], "Color",segcolor, "LineWidth",2);
                hold on;
            end
            ylabel('Amplitude')
            xlabel(sprintf('Spectral Mean (Hz), %.1f Hz', mean(double(BiosoundRaw.SpectralMean),'omitnan')))
            set(gca,'XLim',[25000 30000])
        end
        
        %         % Plot the Amplitude (Mic data) vs Spectral Max (Piezo
        %         % Data)
        %         subplot(5,1,5)
        %         SoundSpecMax = mysmooth(double(BiosoundPiezo.SpectralMax), Span);
        %         if ~isempty(SoundSpecMax)
        %             for ii=HalfSpan:nx-HalfSpan
        %                 segcolor = cmap(fix((TimeSound(ii)+TimeSound(ii+1))*ncolors./3)+1,:);
        %                 plot([SoundSpecMax(ii), SoundSpecMax(ii+1)], [BiosoundRaw.amp(ii), BiosoundRaw.amp(ii+1)], "Color",segcolor, "LineWidth",2);
        %                 hold on;
        %             end
        %             ylabel('Amplitude')
        %             xlabel(sprintf('Spectral Max (Hz), %.1f Hz', nanmean(double(BiosoundPiezo.SpectralMax))))
        %             set(gca,'XLim',[0 10000])
        %         end
        
    end

    function outyy = mysmooth(yy,Span)
        if nargin<2
            Span = 5;
        end
        outyy=nan(size(yy));
        for ii=1:length(yy)
            if ii==1 || ii==length(yy)
                outyy(ii) = yy(ii);
            elseif ii<=((Span-1)/2)
                HalfSpan = ii-1;
                outyy(ii) = mean(yy(1:(ii+HalfSpan)),'omitnan');
            elseif (length(yy)-ii) <= ((Span-1)/2)
                HalfSpan = length(yy)-ii;
                outyy(ii) = mean(yy((ii-HalfSpan):end),'omitnan');
            else
                HalfSpan = (Span-1)/2;
                outyy(ii) = mean(yy((ii-HalfSpan):(ii+HalfSpan)),'omitnan');
            end
        end
    end



end


