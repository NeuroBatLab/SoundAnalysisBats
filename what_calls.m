function what_calls(Loggers_dir, Date, ExpStartTime,SaveBiosoundperFile, PlotDyn, GuessCallType, TransferLocal)
if nargin<4
    SaveBiosoundperFile = 0;
end

if nargin<5
    PlotDyn=1;
end

if nargin<6
    GuessCallType = 1;
end

if nargin<7
    TransferLocal = 1;
end
PrevData_toggle = 1; %set to NaN to let computer ask each time 0 to overwrite any existing data, 1 to use previous data, 2 to use previous data for microphone only, 3 to recalculate data only for sections that were not cut properly
% Hard coded parameters for the filtering of the signal and calculations in biosound
F_high_Raw = 50000;
F_low_Raw = 100;
F_high_Piezo = 10000;
F_low_Piezo = 100;
High_Fc_Piezo = 5000;

% Set to 1 if you want to manually pause after each vocalization and listen
% to them
ManualPause=0;

% Import biosound library
py.importlib.import_module('soundsig')

% Load data
Data1 = dir(fullfile(Loggers_dir, sprintf('%s_%s_VocExtractDat*.mat', Date, ExpStartTime)));
% select the correct files
Gdf = zeros(length(Data1),1);
for df=1:length(Data1)
    if length(strfind(Data1(df).name, '_'))==2
        Gdf(df)=1;
    end
end

if sum(Gdf)==0
    warning('No vocalization data extracted by who_calls.m or get_logger_data_voc.m')
else
    
    DataFile = dir(fullfile(Loggers_dir, sprintf('%s_%s_VocExtractDat*_*.mat', Date, ExpStartTime)));
    if length(DataFile)~=sum(Gdf)
        warning('The number of files generated by get_logger_data_voc (Data1) is not the same as the number generated by who_calls (DataFile)')
        keyboard
    end
    % Loop through the datafiles
    for df=1:sum(Gdf) %1
        % bringing the file back on the local computer (we're going to write
        % pretty often to it)
        Data1 = dir(fullfile(Loggers_dir, sprintf('%s_%s_VocExtractData%d.mat', Date, ExpStartTime, df)));
        if isempty(Data1)
            Data1 = dir(fullfile(Loggers_dir, sprintf('%s_%s_VocExtractData.mat', Date, ExpStartTime)));
        end
        DataFile = dir(fullfile(Loggers_dir, sprintf('%s_%s_VocExtractData%d_*.mat', Date, ExpStartTime,df)));
        if isempty(DataFile) % who calls was the earlier format
            DataFile = dir(fullfile(Loggers_dir, sprintf('%s_%s_VocExtractData_*.mat', Date, ExpStartTime)));
        end
        fprintf(1,'Set %d/%d\nwith file %s and %s', df, sum(Gdf), Data1.name, DataFile.name)
        if TransferLocal
            WorkDir = ['~' filesep 'WorkingDirectoryWhat'];
            fprintf(1,'Transferring data from the server %s\n on the local computer %s\n', DataFile.folder, WorkDir);
            if ~exist('WorkDir','dir')
                mkdir(WorkDir)
            end
            if ~exist(fullfile(WorkDir, DataFile.name), "file")
                [s,m,e]=copyfile(fullfile(DataFile.folder, DataFile.name), WorkDir, 'f');
                if ~s
                    m %#ok<NOPRT>
                    e %#ok<NOPRT>
                    error('File transfer did not occur correctly for %s\n', fullfile(DataFile.folder, DataFile.name));
                end
            end
            if ~exist(fullfile(WorkDir, Data1.name), "file")
                [s,m,e]=copyfile(fullfile(Data1.folder, Data1.name), WorkDir, 'f');
                if ~s
                    m %#ok<NOPRT>
                    e %#ok<NOPRT>
                    error('File transfer did not occur correctly for %s\n', fullfile(Data1.folder, Data1.name));
                end
            end
        else
            WorkDir = Loggers_dir;
        end
        load(fullfile(WorkDir, DataFile.name), 'IndVocStartRaw_merged', 'IndVocStopRaw_merged', 'IndVocStartPiezo_merged', 'IndVocStopPiezo_merged','IndVocStartPiezo','IndVocStopPiezo','IndVocStartRaw','IndVocStopRaw', 'BatID','LoggerName');
        if ~exist('BatID', 'var')
            Ind_ = strfind(DataFile.name, '_');
             load(fullfile(WorkDir, sprintf('%s_%s_VocExtractData%d%s', Date, ExpStartTime,1, DataFile.name(Ind_(end):end))), 'BatID','LoggerName');
        end
        load(fullfile(WorkDir, Data1.name), 'FS','Piezo_wave','Raw_wave', 'Piezo_FS','VocFilename', 'Old_vv_out_list');
        
        if length(IndVocStartRaw_merged)>length(VocFilename) && exist('Old_vv_out_list', 'var') % This is a correction of the correction of merge patch in Who_Calls_Play_Less :-P
           
            load(fullfile(WorkDir, DataFile.name), 'IndVocStartRaw_merged', 'IndVocStopRaw_merged', 'IndVocStartPiezo_merged', 'IndVocStopPiezo_merged','IndVocStartRaw','IndVocStopRaw', 'IndVocStartPiezo', 'IndVocStopPiezo','IndVocStart_all', 'IndVocStop_all', 'RMSRatio_all', 'RMSDiff_all');
            IndVocStartRaw_merged = IndVocStartRaw_merged(1:length(VocFilename));
            IndVocStopRaw_merged = IndVocStopRaw_merged(1:length(VocFilename));
            IndVocStartPiezo_merged = IndVocStartPiezo_merged(1:length(VocFilename));
            IndVocStopPiezo_merged = IndVocStopPiezo_merged(1:length(VocFilename));
            IndVocStartRaw = IndVocStartRaw(1:length(VocFilename));
            IndVocStopRaw = IndVocStopRaw(1:length(VocFilename));
            IndVocStartPiezo = IndVocStartPiezo(1:length(VocFilename));
            IndVocStopPiezo = IndVocStopPiezo(1:length(VocFilename));
            IndVocStart_all  = IndVocStart_all(1:length(VocFilename));
            IndVocStop_all  = IndVocStop_all(1:length(VocFilename));
            RMSRatio_all = RMSRatio_all(1:length(VocFilename));
            RMSDiff_all= RMSDiff_all(1:length(VocFilename));
            save(fullfile(WorkDir, DataFile.name), 'IndVocStartRaw_merged', 'IndVocStopRaw_merged', 'IndVocStartPiezo_merged', 'IndVocStopPiezo_merged','IndVocStartRaw','IndVocStopRaw', 'IndVocStartPiezo', 'IndVocStopPiezo','IndVocStart_all', 'IndVocStop_all', 'RMSRatio_all', 'RMSDiff_all', '-append');

            clear IndVocStartRaw IndVocStopRaw IndVocStart_all IndVocStop_all RMSRatio_all RMSDiff_all
        end
            
            
    
    
        % Number of call sequences with identified vocalizations
        VocInd = find(~cellfun('isempty',IndVocStartRaw_merged));
        VocInd_true = nan(size(VocInd));
        for vvi=1:length(VocInd)
            VocInd_true(vvi) = any(~cellfun('isempty',IndVocStartRaw_merged{VocInd(vvi)}));
        end
        VocInd = VocInd(logical(VocInd_true));
        VocInd2 = find(~cellfun('isempty',IndVocStartPiezo));
        VocInd2_true = nan(size(VocInd2));
        for vvi=1:length(VocInd2)
            VocInd2_true(vvi) = any(~cellfun('isempty',IndVocStartPiezo{VocInd2(vvi)}));
        end
        VocInd2 = VocInd2(logical(VocInd2_true));
        if length(VocInd) ~= length(VocInd2) || any(VocInd~=VocInd2)
%             keyboard % there should be the same sequences labelled as having vocalizationss
            VocInd = intersect(VocInd, VocInd2);
        end
        NV = length(VocInd);
        Fns_AL = fieldnames(Piezo_wave);
    
        % Filter for the Mic signal
        [z,p,k] = butter(6,[F_low_Raw F_high_Raw]/(FS/2),'bandpass');
        sos_band_raw = zp2sos(z,p,k);
    
        % Filter for the Piezo signal
        PFS = round(mean(Piezo_FS.(Fns_AL{1})(:), 'omitnan'));
        [z,p,k] = butter(6,[F_low_Piezo F_high_Piezo]/(PFS/2),'bandpass');
        sos_band_piezo = zp2sos(z,p,k);
        
        % create the output directoty
        Path2Wav = fullfile(Loggers_dir, 'VocExtracts');
        mkdir(Path2Wav);
    
        % Count the number of vocalization cuts for preallocation of space
        VocCall = 0;
        for vv_what=1:NV
            for ll=1:length(IndVocStartRaw_merged{VocInd(vv_what)})
                VocCall = VocCall + length(IndVocStartRaw_merged{VocInd(vv_what)}{ll});
            end
        end
    
        try
            if SaveBiosoundperFile
                load(fullfile(WorkDir, DataFile.name),'BioSoundFilenames','NVocFile','vv_what', 'Ncall');
            else
                load(fullfile(WorkDir, DataFile.name), 'BioSoundCalls','BioSoundFilenames','NVocFile','vv_what', 'Ncall');
            end
            if exist('BioSoundCalls','var') && isnan(PrevData_toggle)
                PrevData = input('Do you want to use previous data? 0: no; 1: yes; 2:yes only for microphone (recalculate piezo)');
            elseif isnan(PrevData_toggle)
                fprintf(1, 'No previous data, starting from scratch');
                PrevData = 0;
            elseif exist('BioSoundCalls','var')
                PrevData = PrevData_toggle;
                fprintf(1,'Enforced PrevData usage to %d\n', PrevData_toggle);
            else
                fprintf(1, 'No previous data, starting from scratch');
                PrevData = 0;
            end
        catch
            fprintf(1, 'No previous data, starting from scratch\n');
            PrevData = 0;
        end
        if ~PrevData
            BioSoundFilenames = cell(VocCall,2);
            if ~SaveBiosoundperFile
                BioSoundCalls = cell(VocCall,2);
            end
            Firstcall = 1;
            NVocFile = 0;
            Ncall = nan(NV,length(Fns_AL));
        elseif PrevData==1
            Firstcall=vv_what;
            NVocFile = sum(sum(Ncall(1:(vv_what-1),:)));
        elseif PrevData==2 || PrevData==3
            Firstcall = 1;
            NVocFile = 0;
        end
        if Firstcall==NV && ~isempty(BioSoundCalls{end,1})
            clear BioSoundCalls
            continue
        end
        %% Loop through calls, save them as wav files and run biosound
        % Turn off warning notifications for python 2 struct conversion
        warning('off', 'MATLAB:structOnObject')
    
    
        for vv_what=Firstcall:NV
            if strfind(VocFilename{VocInd(vv_what)}, '/')
                [~,FileVoc]=fileparts(VocFilename{VocInd(vv_what)});
            else
                ParseVocFile = strsplit(VocFilename{VocInd(vv_what)}, '\');
                FileVoc = ParseVocFile{end};
            end
            for ll=1:length(Fns_AL)
                % Logger number
                AL_local = Fns_AL{ll};
                ALNum = AL_local(7:end);
                % ID of the bat
                ALIndex = contains(LoggerName, 'AL') .* contains(LoggerName, ALNum);
                BatID_local =BatID{find(ALIndex)}; %#ok<FNDSB>
                Ncall(vv_what,ll) = length(IndVocStartRaw_merged{VocInd(vv_what)}{ll});
                if Ncall(vv_what,ll)
                    for nn=1:Ncall(vv_what,ll)
                        NVocFile = NVocFile +1;
                        if (ll>1 && NVocFile~=(sum(sum(Ncall(1:(vv_what-1),:)))+ sum(Ncall(vv_what,1:(ll-1))) + nn)) || ll==1 && NVocFile~=(sum(sum(Ncall(1:(vv_what-1),:))) + nn)
                            warning('Issue with the call counting')
                            keyboard
                        end
                        fprintf(1,'\n\n%d/%d Vocalization\n',NVocFile,VocCall)
                        if PrevData~=2
                            fprintf(1,'--> Microphone Calculations\n')
                            % Extract the sound of the microphone that
                            % correspond to the data
                            IndOn = IndVocStartRaw_merged{VocInd(vv_what)}{ll}(nn);
                            IndOff = min(length(Raw_wave{VocInd(vv_what)}),IndVocStopRaw_merged{VocInd(vv_what)}{ll}(nn)); % we take the min here as sometimes the rounding procedures gets numbers outisde of wave length
                            Dur = (IndOff-IndOn)/FS;
                            if IndOn>=IndOff || Dur<0.01 % sound too short to be a call
                                warning('Miss-allignement between Microphone and piezo, skip this one for Microphone data\n')
                                %                             keyboard
                            else
                                WL = Raw_wave{VocInd(vv_what)}(IndOn:IndOff);
                                FiltWL = filtfilt(sos_band_raw,1,WL);
                                FiltWL = FiltWL-mean(FiltWL);
                                FiltWL2 = []; % Set default value of WL2 as empty
                                BioSoundFilenames{NVocFile,1} = fullfile(Path2Wav,sprintf('%s_Bat%d_AL%s_Elmt%d_Raw.wav',FileVoc, BatID_local,ALNum,nn));
                                audiowrite(BioSoundFilenames{NVocFile,1},WL,FS);
                                if Dur>=0.1
                                    % get the onset and offfsets of every
                                    % single vocal element OnOffSetsInd
                                    OnOffInd = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStopRaw{VocInd(vv_what)}{ll}<=IndOff));
                                    if ~OnOffInd
                                        OnOffInd = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStartRaw{VocInd(vv_what)}{ll}<IndOff));
                                    end
                                    if PrevData==3
                                        OnOffIndOld = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStopRaw{VocInd(vv_what)}{ll}<IndOff)); % here I am checking for a past error in the data (get rid of it once I have rerun up to Set 30/33 200129)
                                        OnOffError = abs(sum(OnOffInd)-sum(OnOffIndOld));% here I am checking for a past error in the data (get rid of it once I have rerun up to Set 30/33 200129)
                                    else
                                        OnOffError = 0;
                                        OnOffError2= 0;
                                    end
                                    OnOffSetsInd = ([IndVocStartRaw{VocInd(vv_what)}{ll}(OnOffInd)' IndVocStopRaw{VocInd(vv_what)}{ll}(OnOffInd)']-IndOn+1);
                                    if SaveBiosoundperFile
                                        BioSoundCall = runBiosound(FiltWL, FS, F_high_Raw,[], FiltWL2,OnOffSetsInd);
                                        save(sprintf('%s_biosound.mat', BioSoundFilenames{NVocFile,1}(1:end-4)),'BioSoundCall')
                                    elseif PrevData~=3 || OnOffError % here I am checking for a past error in the data (get rid of it once I have rerun up to Set 30/33 200129)
                                        try
                                            BioSoundCalls{NVocFile,1} = runBiosound(FiltWL, FS, F_high_Raw, [], FiltWL2,OnOffSetsInd);
                                        catch ME
                                            warning('Issue cannot run biosound the error is:\n%s, skip\n', ME.identifier)
                                            continue
                                        end
                                    end
                                else
                                    warning('Very Short vocalization, extracting the vocalization in a larger window of 100ms for mps calculations purposes\n')
                                    IndOn2 = IndOn - ceil((0.1- Dur)*FS/2);
                                    IndOff2 = IndOff + ceil((0.1 - Dur)*FS/2);
                                    if IndOn2<0
                                        IndOn2=1;
                                        IndOff2 = IndOff + ceil((0.1 - Dur)*FS) - IndOn;
                                    elseif IndOff2>length(Raw_wave{VocInd(vv_what)})
                                        IndOff2 = length(Raw_wave{VocInd(vv_what)});
                                        IndOn2 = IndOn - ceil((0.1 - Dur)*FS) + IndOff2 - IndOff;
                                    end
                                    if (IndOn2<0) || IndOff2>length(Raw_wave{VocInd(vv_what)})
                                        warning('we cannot get a larger window of 100ms for this one')
                                        keyboard
                                        IndOn2=1;
                                        IndOff2 = length(Raw_wave{VocInd(vv_what)});
                                    end
                                    WL2 = Raw_wave{VocInd(vv_what)}(IndOn2:IndOff2);
                                    WL2 = WL2 - mean(WL2); % center the piezo data around 0
                                    if any(abs(WL2)>=1)
                                        WL2 = WL2./max(abs(WL2)); % scale between 0 and 1 if exceeding 1
                                    end
                                    FiltWL2 = filtfilt(sos_band_raw,1,WL2);
                                    % Onset and offset of each sound element
                                    % in WL
                                    OnOffInd = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStopRaw{VocInd(vv_what)}{ll}<=IndOff));
                                    if ~OnOffInd
                                        OnOffInd = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStartRaw{VocInd(vv_what)}{ll}<IndOff));
                                    end
                                    OnOffSetsInd = ([IndVocStartRaw{VocInd(vv_what)}{ll}(OnOffInd)' IndVocStopRaw{VocInd(vv_what)}{ll}(OnOffInd)']-IndOn+1);
                                    if PrevData==3
                                        OnOffInd_Old = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStartRaw{VocInd(vv_what)}{ll}<IndOff));
                                        OnOffError = abs(sum(OnOffInd) - sum(OnOffInd_Old));
                                    else 
                                        OnOffError =0;
                                    end
                                    % Onset and offset of each sound element
                                    % in WL2
                                    OnOffInd2 = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn2) .* (IndVocStopRaw{VocInd(vv_what)}{ll}<=IndOff2));
                                    if ~OnOffInd2
                                        OnOffInd2 = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn2) .* (IndVocStartRaw{VocInd(vv_what)}{ll}<IndOff2));
                                    end
                                    if PrevData==3
                                        OnOffInd2_Old = logical((IndVocStartRaw{VocInd(vv_what)}{ll}>=IndOn2) .* (IndVocStartRaw{VocInd(vv_what)}{ll}<IndOff2));
                                        OnOffError2 = abs(sum(OnOffInd2) - sum(OnOffInd2_Old));
                                    else
                                        OnOffError2=0;
                                    end
                                    OnOffSetsInd2 = ([IndVocStartRaw{VocInd(vv_what)}{ll}(OnOffInd2)' IndVocStopRaw{VocInd(vv_what)}{ll}(OnOffInd2)']-IndOn2+1);
                                    if SaveBiosoundperFile
                                        BioSoundCall = runBiosound(FiltWL, FS, F_high_Raw,[],FiltWL2, OnOffSetsInd, OnOffSetsInd2);
                                        save(sprintf('%s_biosound.mat', BioSoundFilenames{NVocFile,1}(1:end-4)),'BioSoundCall')
                                    elseif PrevData~=3 || OnOffError || OnOffError2
                                        try
                                            BioSoundCalls{NVocFile,1} = runBiosound(FiltWL, FS, F_high_Raw,[],FiltWL2, OnOffSetsInd, OnOffSetsInd2);
                                        catch ME
                                            warning('Issue cannot run biosound the error is:\n%s, skip\n', ME.identifier)
                                            continue
                                        end
                                    end
                                end
                                % Plot figures of biosound results for Microphone data
                                if PrevData~=3 || OnOffError || OnOffError2
                                    Fig1=figure(1);
                                    clf
                                    if SaveBiosoundperFile
                                        plotBiosound(BioSoundCall, F_high_Raw, FiltWL2)
                                    else
                                        plotBiosound(BioSoundCalls{NVocFile,1}, F_high_Raw, FiltWL2)
                                    end
                                    hold on
                                    suplabel(sprintf('%d/%d Vocalization',NVocFile,VocCall),'t');
                                    hold off
                                    % Play the sound
                                    if ManualPause
                                        AP=audioplayer(FiltWL./(max(abs(FiltWL))),FS); %#ok<TNMLP>
                                        play(AP)
                                    end
                                    print(Fig1,fullfile(Path2Wav,sprintf('%s_Bat%d_AL%s_Elmt%d_Raw.pdf', FileVoc, BatID_local,ALNum,nn)),'-dpdf','-fillpage')
                                end
                            end
                        end
                        % Extract the sound of the audio-logger that
                        % correspond to the data
                        fprintf(1,'--> Piezo Calculations\n')
                        IndOn = IndVocStartPiezo_merged{VocInd(vv_what)}{ll}(nn);
                        IndOff = min(IndVocStopPiezo_merged{VocInd(vv_what)}{ll}(nn), length(Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)}));
                        FSpiezo = round(Piezo_FS.(Fns_AL{ll})(VocInd(vv_what)));
                        if isnan(FSpiezo)
                            FSpiezo = round(mean(Piezo_FS.(Fns_AL{ll})(:), 'omitnan'));
                        end
                        Dur = (IndOff-IndOn)/FSpiezo;
                        if IndOn>=IndOff || Dur<0.01 % sound too short to be a call
%                             keyboard
                            warning('Miss-allignement between Microphone and piezo, skip this one for Piezo data\n')
                        else
                            WL = Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)}(IndOn:IndOff);
                            WL = WL - mean(WL); % center the piezo data around 0
                            if any(abs(WL)>=1)
                                WL = WL./max(abs(WL)); % scale between 0 and 1 if exceeding 1
                            end
                            FiltWL = filtfilt(sos_band_piezo,1,WL);
                            BioSoundFilenames{NVocFile,2} =fullfile(Path2Wav,sprintf('%s_Bat%d_AL%s_Elmt%d_Piezo.wav',FileVoc,BatID_local,ALNum,nn));
                            audiowrite(BioSoundFilenames{NVocFile,2},WL,FSpiezo);
                            FiltWL2 = [];
                            if Dur>=0.1
                                % get the onset and offfsets of every
                                % single vocal element OnOffSetsInd
                                OnOffInd = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStopPiezo{VocInd(vv_what)}{ll}<=IndOff));
                                if ~OnOffInd
                                    OnOffInd = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStartPiezo{VocInd(vv_what)}{ll}<IndOff));
                                end
                                if PrevData==3
                                    OnOffInd_Old = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStopPiezo{VocInd(vv_what)}{ll}<IndOff));
                                    OnOffError = abs(sum(OnOffInd) - sum(OnOffInd_Old));
                                else
                                    OnOffError= 0;
                                    OnOffError2= 0;
                                end
                                OnOffSetsInd = ([IndVocStartPiezo{VocInd(vv_what)}{ll}(OnOffInd)' IndVocStopPiezo{VocInd(vv_what)}{ll}(OnOffInd)']-IndOn+1);
                                if SaveBiosoundperFile
                                    BioSoundCall = runBiosound(FiltWL, FSpiezo, F_high_Piezo, High_Fc_Piezo, [], OnOffSetsInd);
                                    save(sprintf('%s_biosound.mat', BioSoundFilenames{NVocFile,2}(1:end-4)),'BioSoundCall')
                                elseif PrevData~=3 || OnOffError
                                    BioSoundCalls{NVocFile,2} = runBiosound(FiltWL, FSpiezo, F_high_Piezo, High_Fc_Piezo,[],OnOffSetsInd);
                                end
                            else
                                warning('Very Short vocalization, extracting the vocalization in a larger window of 100ms for mps calculations purposes\n')
                                IndOn2 = IndOn - ceil((0.1 - Dur)*FSpiezo/2);
                                IndOff2 = IndOff + ceil((0.1 - Dur)*FSpiezo/2);
                                if IndOn2<0
                                    IndOn2=1;
                                    IndOff2 = IndOff + ceil((0.1 - Dur)*FSpiezo) - IndOn;
                                elseif IndOff2>length(Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)})
                                    IndOff2 = length(Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)});
                                    IndOn2 = IndOn - ceil((0.1 - Dur)*FSpiezo) + IndOff2 - IndOff;
                                end
                                if (IndOn2<0) || IndOff2>length(Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)})
                                    warning('we cannot get a larger window of 100ms for this one')
                                    keyboard
                                    IndOn2=1;
                                    IndOff2 = length(Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)});
                                end
                                WL2 = Piezo_wave.(Fns_AL{ll}){VocInd(vv_what)}(IndOn2:IndOff2);
                                WL2 = WL2 - mean(WL2); % center the piezo data around 0
                                if any(abs(WL2)>=1)
                                    WL2 = WL2./max(abs(WL2)); % scale between 0 and 1 if exceeding 1
                                end
                                FiltWL2 = filtfilt(sos_band_piezo,1,WL2);
                                % Onset and offset of each sound element
                                % in WL
                                OnOffInd = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStopPiezo{VocInd(vv_what)}{ll}<=IndOff));
                                if ~OnOffInd
                                    OnOffInd = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStartPiezo{VocInd(vv_what)}{ll}<IndOff));
                                end
                                OnOffSetsInd = ([IndVocStartPiezo{VocInd(vv_what)}{ll}(OnOffInd)' IndVocStopPiezo{VocInd(vv_what)}{ll}(OnOffInd)']-IndOn+1);
                                if PrevData==3
                                    OnOffInd_Old = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn) .* (IndVocStartPiezo{VocInd(vv_what)}{ll}<IndOff));
                                    OnOffError = abs(sum(OnOffInd)-sum(OnOffInd_Old));
                                else
                                    OnOffError = 0;
                                end
                                % Onset and offset of each sound element
                                % in WL2
                                OnOffInd2 = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn2) .* (IndVocStopPiezo{VocInd(vv_what)}{ll}<=IndOff2));
                                if ~OnOffInd2
                                    OnOffInd2 = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn2) .* (IndVocStartPiezo{VocInd(vv_what)}{ll}<IndOff2));
                                end
                                OnOffSetsInd2 = ([IndVocStartPiezo{VocInd(vv_what)}{ll}(OnOffInd2)' IndVocStopPiezo{VocInd(vv_what)}{ll}(OnOffInd2)']-IndOn2+1);
                                if PrevData==3
                                    OnOffInd2_Old = logical((IndVocStartPiezo{VocInd(vv_what)}{ll}>=IndOn2) .* (IndVocStartPiezo{VocInd(vv_what)}{ll}<IndOff2));
                                    OnOffError2 = abs(sum(OnOffInd2) - sum(OnOffInd2_Old));
                                else
                                    OnOffError2 = 0;
                                end
                                if SaveBiosoundperFile
                                    BioSoundCall = runBiosound(FiltWL, FSpiezo, F_high_Piezo, High_Fc_Piezo,FiltWL2,OnOffSetsInd,OnOffSetsInd2);
                                    save(sprintf('%s_biosound.mat', BioSoundFilenames{NVocFile,2}(1:end-4)),'BioSoundCall')
                                elseif PrevData~=3 || OnOffError || OnOffError2
                                    BioSoundCalls{NVocFile,2} = runBiosound(FiltWL, FSpiezo, F_high_Piezo,High_Fc_Piezo, FiltWL2,OnOffSetsInd,OnOffSetsInd2);
                                end
                            end
                            % Plot figures of biosound results for piezo data
                            if PrevData~=3 || OnOffError || OnOffError2
                                Fig2=figure(2);
                                clf
                                if SaveBiosoundperFile
                                    plotBiosound(BioSoundCall, F_high_Piezo,FiltWL2,0)
                                else
                                    plotBiosound(BioSoundCalls{NVocFile,2}, F_high_Piezo,FiltWL2,0)
                                end
                                hold on
                                suplabel(sprintf('%d/%d Vocalization',NVocFile,VocCall), 't');
                                hold off
                                % Play the sound
                                if ManualPause
                                    AP=audioplayer(WL,FSpiezo); %#ok<TNMLP>
                                    play(AP)
                                end
                                print(Fig2,fullfile(Path2Wav,sprintf('%s_Bat%d_AL%s_Elmt%d_Piezo.pdf', FileVoc, BatID_local,ALNum,nn)),'-dpdf','-fillpage')
                            end
                        end
                        % Plot figures of dynamic jointly evaluated by piezo and
                        % microphone data
                        if PlotDyn && ~isempty(BioSoundCalls{NVocFile,1}) && (PrevData~=3)
                            Fig3 = figure(3); %#ok<NASGU>
                            clf
                            title(sprintf('%d/%d Vocalization',NVocFile,VocCall))
                            plotCallDynamic(BioSoundCalls{NVocFile,1}, BioSoundCalls{NVocFile,2})
    %                       print(Fig3,fullfile(Path2Wav,sprintf('%s_Bat%d_AL%s_Elmt%d_Dyn.pdf', FileVoc, BatID_local,ALNum,nn)),'-dpdf','-fillpage')
                        end
                    
                        % Guess for the call category
                        if GuessCallType && (PrevData~=3)
                            try double(BioSoundCalls{NVocFile,1}.AmpPeriodP);
                                if (BioSoundCalls{NVocFile,1}.AmpPeriodF<40.5) && (BioSoundCalls{NVocFile,1}.AmpPeriodF>34) && (BioSoundCalls{NVocFile,1}.AmpPeriodP>0.075)
                                    Guess ='Tr';
                                else
                                    Guess ='Ba';
                                end
                                
                            catch
                                Guess = 'Ba';
                            end
                            %                 if ManualPause
                            %                     Resp = input(sprintf('Is this a Trill (t) or a Bark (b)? Computer guess: %s. Leave empty if you agree',Guess),'s');
                            Resp = [];
                            if isempty(Resp)
                                BioSoundCalls{NVocFile,1}.type = Guess;
                                BioSoundCalls{NVocFile,2}.type = Guess;
                            elseif strcmp(Resp, 't')
                                BioSoundCalls{NVocFile,1}.type = 'Tr';
                                BioSoundCalls{NVocFile,2}.type = 'Tr';
                            elseif strcmp(Resp, 'b')
                                BioSoundCalls{NVocFile,1}.type = 'Ba';
                                BioSoundCalls{NVocFile,2}.type = 'Ba';
                            end
                            %                 end
                        end
                        pause(0.001)
                    end
                end
            end
        
            % save the values!
            if ~SaveBiosoundperFile
                save(fullfile(WorkDir, DataFile.name), 'BioSoundCalls','BioSoundFilenames','NVocFile','vv_what','Ncall','-append');
            else
                save(fullfile(WorkDir, DataFile.name), 'BioSoundFilenames','NVocFile','vv_what','Ncall','-append');
            end
            
        end
        
        clear BioSoundCalls
   
        % Turn off warning notifications for python 2 struct conversion
        warning('on', 'MATLAB:structOnObject')
        
        if TransferLocal
            % Transfer data back on the server
            fprintf(1,'Transferring data from the local computer %s\n back on the server %s\n', WorkDir, DataFile.folder);
            [s,m,e]=copyfile(fullfile(WorkDir, DataFile.name), DataFile.folder, 'f');
            if ~s
                TicTransfer = tic;
                while toc(TicTransfer)<30*60
                    [s,m,e]=copyfile(fullfile(WorkDir, DataFile.name), DataFile.folder, 'f');
                    if s
                        return
                    end
                end
                if ~s
                    s %#ok<NOPRT>
                    m %#ok<NOPRT>
                    e %#ok<NOPRT>
                    error('File transfer did not occur correctly for %s\n Although we tried for 30min\n', DataFile.folder);
                else
                    fprintf('Data transfered back on server in:\n%s\n',  DataFile.folder);
                end
            else
                fprintf('Data transfered back on server in:\n%s\n',  DataFile.folder);
            end
        end
    end
    if TransferLocal
        if s  %erase local data
            [sdel,mdel,edel]=rmdir(WorkDir, 's');
            if ~sdel
                TicErase = tic;
                while toc(TicErase)<30*60
                    [sdel,mdel,edel]=rmdir(WorkDir, 's');
                    if sdel
                        return
                    end
                end
            end
            if ~sdel
                sdel %#ok<NOPRT>
                mdel %#ok<NOPRT>
                edel %#ok<NOPRT>
                error('File erase did not occur correctly for %s\n Although we tried for 30min\n', WorkDir);
            end
        end
    end
end

%% Internal functions


    function BioSoundObj = runBiosound(Y, FS, F_high,HighFc, Y2,OnOffSetsInd,OnOffSetsInd2)
        if nargin<7
            OnOffSetsInd2=nan;
        end
        if nargin<6
            OnOffSetsInd=nan;
        end
        if nargin<5 || isempty(Y2)
            Y2=nan;
        end
        if nargin<4 || isempty(HighFc)
            HighFc = 18000;% 15000 High frequency cut-off for band-passing the signal prior to auto-correlation in Saliency calculation and fundamental calculation
        end
        % Hard coded parameters for biosound
        % Spectrum parameters
        if nargin<3
            F_high = 50000; % frequency of Low-pass filter Hz
        end
        DBNOISE = 60; % Threshold on amplitude of spectrogram to extract time varying spectral mean and quartiles
        Quartile_values = [0.25, 0.5, 0.75];
        % spectrogram parameters
        Spec_sample_rate = 1000; % sampling rate Hz
        Freq_spacing = 100; % width of the frequency window for the FFT Hz
        Min_freq = 300; % high pass filter before FFT Hz
        Max_freq = F_high; % Low pass filter before FFT Hz
        % temporal enveloppe parameters
        Cutoff_freq = 150; % Hz
        Amp_sample_rate = 1000; % Hz
        % Fundamental parameters
        MaxFund = 4000;
        MinFund = 50;
        LowFc = 50; %100
        MinSaliency = 0.2; % used to be 0.6
        DebugFigFundest = 0;
        MinFormantFreq = 2000;
        MaxFormantBW = 1000; %500
        WindowFormant = 0.1;
        Method= 'AC';%used to be 'Stack'
        fprintf(1, 'running Biosound with Fundest method = %s\n', Method)
       
        
        % create the biosound object
        BiosoundObj = py.soundsig.sound.BioSound(py.numpy.array(Y),pyargs('fs',FS));
        if ~isnan(Y2)
            BiosoundObj2 = py.soundsig.sound.BioSound(py.numpy.array(Y2),pyargs('fs',FS));
        end
        % methods(BiosoundFi, '-full') % this command plot all the methods with the available arguments
        
        % Calculate the RMS (lhs std(varargin))
        BioSoundObj.rms = BiosoundObj.sound.std();
        
        % calculate the amplitude enveloppe
        ampenv(BiosoundObj, Cutoff_freq,Amp_sample_rate);
        
        % Calculate the periodicity of the amplitude envelope
        SoundAmp = double(py.array.array('d', py.numpy.nditer(BiosoundObj.amp)));
        [P,F] = pspectrum(SoundAmp,1000);
        [PKS,LOCS]=findpeaks(P);
        AmpPeriodF = F(LOCS(PKS == max(PKS))); % Frequency in hertz of the max peak
        AmpPeriodP = max(PKS)/mean(SoundAmp.^2); % Proportion of power in the max peak of the spectrum
        
        % calculate the spectrum (lhs spectrum(self, f_high, pyargs))
        spectrum(BiosoundObj, F_high)

         % if there are several sound elements in the section, then obtain
        % statistics of the amplitude envelope, spectral envelope and MPS for
        % each. The sound elements have to be 50ms appart and are isolated
        % in 100ms window if they are shorter than 100ms
        if ~isnan(Y2) % if a longer version of the data is provided, use that!
            OnOffSetsInd_local = OnOffSetsInd2;
            Y_local = Y2;
        else
            OnOffSetsInd_local = OnOffSetsInd;
            Y_local = Y;
        end

        if size(OnOffSetsInd_local,1)>1 && any(((OnOffSetsInd_local(2:end,1) - OnOffSetsInd_local(1:end-1,2))./FS*1000)>50)
            ICI = ( OnOffSetsInd_local(2:end,1) - OnOffSetsInd_local(1:end-1,2))./FS*1000;
            ICILarge = find(ICI>50);
            BioSoundObj.meanspect = nan(length(ICILarge)+1,1);
            BioSoundObj.stdspect = nan(length(ICILarge)+1,1);
            BioSoundObj.kurtosisspect = nan(length(ICILarge)+1,1);
            BioSoundObj.skewspect = nan(length(ICILarge)+1,1);
            BioSoundObj.entropyspect = nan(length(ICILarge)+1,1);
            BioSoundObj.meantime = nan(length(ICILarge)+1,1);
            BioSoundObj.stdtime = nan(length(ICILarge)+1,1);
            BioSoundObj.kurtosistime = nan(length(ICILarge)+1,1);
            BioSoundObj.skewtime = nan(length(ICILarge)+1,1);
            BioSoundObj.entropytime = nan(length(ICILarge)+1,1);
            BioSoundObj.entropytime = nan(length(ICILarge)+1,1);
            Onset_local = nan(length(ICILarge)+1,1);
            Offset_local = nan(length(ICILarge)+1,1);
            for bo=1:(length(ICILarge)+1)
                if bo==1
                    Onset_local(bo) = OnOffSetsInd_local(1,1);
                    Offset_local(bo) = OnOffSetsInd_local(ICILarge(bo),2);
                elseif bo<=length(ICILarge)
                    Onset_local(bo) = OnOffSetsInd_local(ICILarge(bo-1)+1,1);
                    Offset_local(bo) = OnOffSetsInd_local(ICILarge(bo),2);
                elseif bo>length(ICILarge) % This is the last call
                    Onset_local(bo) = OnOffSetsInd_local(ICILarge(bo-1)+1,1);
                    Offset_local(bo) = OnOffSetsInd_local(end,2);
                else
                    warning('We should not end up there!!')
                    keyboard
                end
                Ybo = Y_local(Onset_local(bo):Offset_local(bo));
                BO = py.soundsig.sound.BioSound(py.numpy.array(Ybo),pyargs('fs',FS));
                % Calculate the amplitude envelope and its momentums
                ampenv(BO, Cutoff_freq,Amp_sample_rate);
                % Calculate the spectral envelope and its momentums
                spectrum(BO, F_high)
                BioSoundObj.meanspect(bo) = BO.meanspect;
                BioSoundObj.stdspect(bo) = BO.stdspect;
                BioSoundObj.kurtosisspect(bo) = BO.kurtosisspect;
                BioSoundObj.skewspect(bo) = BO.skewspect;
                BioSoundObj.entropyspect(bo) = BO.entropyspect;
                BioSoundObj.meantime(bo) = BO.meantime;
                BioSoundObj.stdtime(bo) = BO.stdtime;
                BioSoundObj.kurtosistime(bo) = BO.kurtosistime;
                BioSoundObj.skewtime(bo) = BO.skewtime;
                BioSoundObj.entropytime(bo) = BO.entropytime;
            end

            BioSoundObj.spectro_elmts = cell(length(ICILarge)+1,1); % Spectro of individual sound elements
            BioSoundObj.to_elmts = cell(length(ICILarge)+1,1); % Spectro t0 of individual sound elements
            BioSoundObj.fo_elmts = cell(length(ICILarge)+1,1);% Spectro f0 of individual sound elements
            BioSoundObj.mps_elmts= cell(length(ICILarge)+1,1); % mps of individual sound elements
            BioSoundObj.wt_elmts= cell(length(ICILarge)+1,1); % mps of individual sound elements
            BioSoundObj.wf_elmts= cell(length(ICILarge)+1,1); % mps of individual sound elements
            for bo = 1:(length(ICILarge)+1)
                Ybo = Y_local(Onset_local(bo):Offset_local(bo));
                if length(Ybo)<(0.1*FS) % the extract is shorter than 100ms and needs to be placed in a larger window for calculation of the MPS
                    if bo==1
                        TimeBefore = Onset_local(bo)-1;
                        TimeAfter = (Onset_local(bo+1)-Offset_local(bo))-1;
                    elseif bo<length(Onset_local)
                        TimeBefore = (Onset_local(bo)-Offset_local(bo-1))-1;
                        TimeAfter = (Onset_local(bo+1)-Offset_local(bo))-1;
                    elseif bo==length(Onset_local) % This is the last call
                        TimeBefore = (Onset_local(bo)-Offset_local(bo-1))-1;
                        TimeAfter = (length(Y_local)-Offset_local(bo));
                    else
                        warning('We should not end up there!!')
                        keyboard
                    end
                    Blank = 2*(ceil((0.1*FS-length(Ybo))/2)); % making sure we ask for a value that splits in 2
                    if TimeBefore>=(Blank/2) && TimeAfter>=(Blank/2)
                        Onset_local2 = Onset_local(bo)- Blank/2;
                        Offset_local2 = min(Offset_local(bo) + Blank/2, length(Y_local));
                    elseif TimeBefore<(Blank/2) && TimeAfter>=(Blank/2) % not enough time before
                        Onset_local2 = Onset_local(bo)-TimeBefore;
                        Offset_local2 = min(Offset_local(bo) + Blank - TimeBefore, length(Y_local));
                    elseif TimeBefore>=(Blank/2) && TimeAfter<(Blank/2) % not enough time after
                        Onset_local2 = Onset_local(bo)- Blank + TimeAfter;
                        Offset_local2 = min(Offset_local(bo) + TimeAfter, length(Y_local));
                    end
                    Ybo = Y_local(Onset_local2:Offset_local2); % Overwrite Ybo
                end
                % Now proceed with Spectrogram and MPS calculations
                BO = py.soundsig.sound.BioSound(py.numpy.array(Ybo),pyargs('fs',FS));
                % calculate the spectrogram of this sound element(lhs spectroCalc(self, spec_sample_rate,
                % freq_spacing, min_freq, max_freq, pyargs))
                spectroCalc(BO, Spec_sample_rate, Freq_spacing, Min_freq,Max_freq)
                % calculate the mpw of this sound element
                Window = 0.1;% duration of the window in sec when binning the spectrogram
                Norm = 1; % boolean to indicate if you want to normalize or not the MPS (zscore of the spectrogram before 2Dfft
                mpsCalc(BO, Window, Norm)
                BioSoundObj.spectro_elmts{bo} = double(BO.spectro); % Spectro of individual sound elements
                BioSoundObj.to_elmts{bo} = double(BO.to); % Spectro t0 of individual sound elements
                BioSoundObj.fo_elmts{bo} = double(BO.fo);% Spectro f0 of individual sound elements
                BioSoundObj.mps_elmts{bo}= double(BO.mps); % mps of individual sound elements
                BioSoundObj.wt_elmts{bo}= double(BO.wt); % mps of individual sound elements
                BioSoundObj.wf_elmts{bo}= double(BO.wf); % mps of individual sound elements
            end
            BioSoundObj.OnOffSets_elmts = [Onset_local Offset_local];
        else
            BioSoundObj.meanspect = double(BiosoundObj.meanspect);
            BioSoundObj.stdspect = double(BiosoundObj.stdspect);
            BioSoundObj.kurtosisspect = double(BiosoundObj.kurtosisspect);
            BioSoundObj.skewspect = double(BiosoundObj.skewspect);
            BioSoundObj.entropyspect = double(BiosoundObj.entropyspect);
            BioSoundObj.meantime = double(BiosoundObj.meantime);
            BioSoundObj.stdtime = double(BiosoundObj.stdtime);
            BioSoundObj.kurtosistime = double(BiosoundObj.kurtosistime);
            BioSoundObj.skewtime = double(BiosoundObj.skewtime);
            BioSoundObj.entropytime = double(BiosoundObj.entropytime);
        end


        % calculate the spectrogram of the whole sound event(lhs spectroCalc(self, spec_sample_rate,
        % freq_spacing, min_freq, max_freq, pyargs))
        try % For very short sound, the Freq_spacing is too small, doubling if error
            spectroCalc(BiosoundObj, Spec_sample_rate, Freq_spacing, Min_freq,Max_freq)
        catch
            spectroCalc(BiosoundObj, Spec_sample_rate, Freq_spacing.*2, Min_freq,Max_freq)
        end
        if ~isnan(Y2)
            spectroCalc(BiosoundObj2, Spec_sample_rate, Freq_spacing, Min_freq,Max_freq)
        end

        % Calculate the mps
        % MPS parameters
        Window = 0.1;% duration of the window in sec when binning the spectrogram
        Norm = 1; % boolean to indicate if you want to normalize or not the MPS (zscore of the spectrogram before 2Dfft
        if ~isnan(Y2)
            mpsCalc(BiosoundObj2, Window, Norm)
        else
            mpsCalc(BiosoundObj, Window, Norm)
        end
        
        % Calculate time varying spectralmean and spectral quartiles
        Spectro = double(BiosoundObj.spectro);
        maxB = max(max(Spectro));
        minB = maxB-DBNOISE; 
        Spectro(Spectro<minB) =minB;
        Spectro = Spectro-minB;
        Fo = double(BiosoundObj.fo);
        TPoints = size(Spectro,2);
        SpectralMean = nan(1,TPoints);
        Quartile_freq = nan(3,TPoints);
        %         SpectralMax = nan(1,TPoints);
        for tt=1:TPoints
            %             SpectralMax(tt) = Fo(Spectro(:,tt)==max(Spectro(:,tt)));
            PSDSpec = Spectro(:,tt)./(sum(Spectro(:,tt)));
            SpectralMean(tt) = sum(PSDSpec' .* Fo);
            % Find quartile power
            Cum_power = cumsum(Spectro(:,tt));
            Tot_power = sum(Spectro(:,tt));
            Nfreqs = length(Cum_power);
            iq = 1;
            for ifreq=1:Nfreqs
                if (Cum_power(ifreq) > Quartile_values(iq)*Tot_power)
                    Quartile_freq(iq,tt) = Fo(ifreq);
                    iq = iq+1;
                    if (iq > 3)
                        break;
                    end
                end
            end
        end
        
        % calculate the fundamental and related values (lhs fundest(self, maxFund,
        % minFund, lowFc, highFc, minSaliency, debugFig, pyargs)
        try
            fundest(BiosoundObj, MaxFund, MinFund,LowFc, HighFc, MinSaliency,DebugFigFundest,MinFormantFreq,MaxFormantBW,WindowFormant,Method)
        catch ME2% increase the Min Fund value such as to look for only high pitch values (smaller time lag/window)
            if contains(ME2.message, 'Lags are too long')
                try
                    fundest(BiosoundObj, MaxFund, MinFund*10,LowFc, HighFc, MinSaliency,DebugFigFundest,MinFormantFreq,MaxFormantBW,WindowFormant,Method)
                catch ME3
                    warning(ME3.identifier,'Error on calculation of fundamental: %s', ME3.message)
                    fundest(BiosoundObj, MaxFund, MinFund*5,LowFc, HighFc, MinSaliency,DebugFigFundest,MinFormantFreq,MaxFormantBW,WindowFormant,Method)
                end
            else
                keyboard
            end
        end
        
        % Only keep values of fundamentals where there is power in the
        % spectrogram
        PowerThresh = 30;
        Fund = double(BiosoundObj.f0);
        Fund2 = double(BiosoundObj.f0_2);
        MinF0 = floor(min(Fund)/100)*100;
        MaxF0 = ceil(max(Fund)/100)*100;
        SpectroFo = double(BiosoundObj.fo);
        SpectroRows = logical((SpectroFo>MinF0) .* (SpectroFo<MaxF0));
        PowerSpectroBand = mean(Spectro(SpectroRows,:),1);
        VocOffFund = PowerSpectroBand<PowerThresh;
        Fund(VocOffFund) = nan;
        Fund2(VocOffFund) = nan;
        % when the saliency is very low (<0.5), we do not expect to have high
        % values of fundamental (>1kHz), these are probably wrongly calculated
        Sal = double(BiosoundObj.sal);
        BadSalHighFund = logical((Sal<0.5) .* (Fund>1000));
        Fund(BadSalHighFund) = nan;
        Fund2(BadSalHighFund) = nan;

        %Use previously identified and manually curated onsets/offsets according to sound amplitude
        VocOn = zeros(size(Sal));
        OnOffSets = round(OnOffSetsInd./FS*1000);
        OnOffSets(OnOffSets==0) = 1;
        NCall = size(OnOffSets,1);
        for oo=1:NCall
            VocOn(OnOffSets(oo,1):OnOffSets(oo,2)) = ones(1,diff(OnOffSets(oo,:))+1);
        end
        VocOff = ~VocOn;

        % Only keep measurements where there is power in amplitude envelope
        Sal(VocOff) = nan;
        Fund(VocOff) = nan;
        Fund2(VocOff) = nan;
        SpectralMean(VocOff) = nan;
        Quartile_freq(:,VocOff) = nan;
        F1 = double(BiosoundObj.F1);
        F2 = double(BiosoundObj.F2);
        F3 = double(BiosoundObj.F3);
        F1(VocOff) = nan;
        F2(VocOff) = nan;
        F3(VocOff) = nan;
        
        % Calculate average for each manually identified vocalizations
        % separated by more 50ms than its neighbors
        if exist('ICILarge', 'var') % several syllables
            MeanFund = nan(length(ICILarge)+1,1);
            MeanSpectralMean = nan(length(ICILarge)+1,1);
            MeanSal = nan(length(ICILarge)+1,1);
            MeanF1 = nan(length(ICILarge)+1,1);
            MeanF2 = nan(length(ICILarge)+1,1);
            MeanF3 = nan(length(ICILarge)+1,1);
            MeanQuartile_Freq = nan(length(ICILarge)+1,3);

            for bo=1:(length(ICILarge)+1)
                if bo==1
                    Onset = OnOffSets(1,1);
                    Offset = OnOffSets(ICILarge(bo),2);
                elseif bo<=length(ICILarge)
                    Onset = OnOffSets(ICILarge(bo-1)+1,1);
                    Offset = OnOffSets(ICILarge(bo),2);
                elseif bo>length(ICILarge) % This is the last call
                    Onset = OnOffSets(ICILarge(bo-1)+1,1);
                    Offset = OnOffSets(end,2);
                else
                    warning('We should not end up there!!')
                    keyboard
                end
                MeanFund(bo) = mean(Fund(Onset:Offset), 'omitnan');
                MeanSpectralMean(bo) = mean(SpectralMean(Onset:Offset), 'omitnan');
                MeanSal(bo) = mean(Sal(Onset:Offset), 'omitnan');
                MeanF1(bo) = mean(F1(Onset:Offset), 'omitnan');
                MeanF2(bo) = mean(F2(Onset:Offset), 'omitnan');
                MeanF3(bo) = mean(F3(Onset:Offset), 'omitnan');
                MeanQuartile_Freq(bo,:) = mean(Quartile_freq(:,Onset:Offset),2, 'omitnan')';
            end
        else % Only one syllable
            MeanFund = mean(Fund, 'omitnan');
            MeanSpectralMean = mean(SpectralMean, 'omitnan');
            MeanSal = mean(Sal, 'omitnan');
            MeanF1 = mean(F1, 'omitnan');
            MeanF2 = mean(F2, 'omitnan');
            MeanF3 = mean(F3, 'omitnan');
            MeanQuartile_Freq = mean(Quartile_freq,2, 'omitnan')';
        end

        
%         SoundAmp = double(py.array.array('d', py.numpy.nditer(BiosoundObj.amp)));
%         SpectroRows = logical((SpectroFo>500) .* (SpectroFo<5000));
%         PowerSpectroBand = mean(Spectro(SpectroRows,:));
%         if (length(PowerSpectroBand)-length(SoundAmp))==1
%             VocOff = ~((PowerSpectroBand(1:end-1)>=20) .* (SoundAmp>=0.05));% minimum value of amplitude both on sound amplitude envelope and in spectrogram band between 500 and 5000 Hz
%         elseif (length(PowerSpectroBand)==length(SoundAmp))
%             VocOff = ~((PowerSpectroBand>=20) .* (SoundAmp>=0.05));% minimum value of amplitude both on sound amplitude envelope and in spectrogram band between 500 and 5000 Hz
%         else
%             keyboard
%         end

%         VocOff(strfind(VocOff, [0 1 0])+1) = 0; % don't consider very short interruption of 1ms
%         MinDur = 10; %in ms % minimal duration of 10 ms
%         VocOn = ~VocOff;
%         Onsets = find(diff(VocOn)==1)+1;
%         Offsets = find(diff(VocOn)==-1);
%         if (length(Onsets)==length(Offsets)) && ~any(Onsets>Offsets) % easiest case scenario
%             
%         elseif (length(Onsets)-length(Offsets)==1) && (VocOn(end)==1) && (VocOn(1)==0) % the section end with VocOn
%             Offsets = [Offsets length(VocOn)];
%             if any(Onsets>Offsets)
%                 warning('Cannot find correct onset/offsets of vocalizations')
%                 keyboard
%             end
%         elseif (length(Onsets)-length(Offsets)==-1) && (VocOn(1)==1) && (VocOn(end)==0) % the section end with VocOn
%             Onsets = [1 Onsets];
%             if any(Onsets>Offsets)
%                 warning('Cannot find correct onset/offsets of vocalizations')
%                 keyboard
%             end
%         elseif (length(Onsets)==length(Offsets)) && any(Onsets>Offsets) && (VocOn(end)==1) && (VocOn(1)==1)% the section atsrts and ends with VocOn
%             Offsets = [Offsets length(VocOn)];
%             Onsets = [1 Onsets];
%             if any(Onsets>Offsets)
%                 warning('Cannot find correct onset/offsets of vocalizations')
%                 keyboard
%             end
%         else
%             warning('Cannot find correct onset/offsets of vocalizations')
%             keyboard
%         end
%         BadDurations = find((Offsets-Onsets)<MinDur);
%         for dd=1:length(BadDurations)
%             VocOn(Onsets(BadDurations(dd)):Offsets(BadDurations(dd))) = 0;
%         end
%         VocOff = ~VocOn;
%         % Scale values of spectrogram according to dynamic range of the
%         % extract and not according to a fix dynamic range like above for
%         % the calculations of spectral mean
%         Spectro2 = double(BiosoundObj.spectro);
%         minB = min(min(Spectro2));
%         DBRange = maxB-minB;
%         DBNOISE2 = min(DBNOISE, 0.5*DBRange);
%         Spectro2(Spectro2<(maxB-DBNOISE2)) = maxB-DBNOISE2;
%         Spectro2 = Spectro2-(maxB-DBNOISE2);
%         VocOff = mean(Spectro2(1:find(Fo>HighFc,1),:))<DBNOISE2/3; % Range of Spectro set to DBNoise, consider 10 times lower than this range as the threshold for On vocalization
%         if sum(SpectroRows)==0
%             VocOff = SoundAmp<median(SoundAmp);
%         end
        
        
        
        


        

%         % Calculate again the saliency with a lower threshold on minimum
%         NOT NECESSARY ANYMORE, BIOSOUND PACKAGE UPDATED FOR THAT! (April
%         7th 2022)
%         % RMS to calculate Sal
%         [Sal,t] = salEstimator(Y, FS, MinFund, MaxFund,RMSThresh);
%         % check that t is same as BiosoundObj.to
%         if (length(double(BiosoundObj.to)) - length(t))>0 % quick fix for shorter results for Sal
%             warning('Unexpected difference in number of time points. Trying a fix')
%             t = [t nan(1,(length(double(BiosoundObj.to)) - length(t)))];
%             Sal = [Sal nan(1,(length(double(BiosoundObj.to)) - length(Sal)))];
%         elseif (length(double(BiosoundObj.to)) - length(t))<0 % quick fix for longer results for Sal
%             t = t(1:length(double(BiosoundObj.to)));
%             Sal = Sal(1:length(double(BiosoundObj.to)));
%         end
%         if any(~(round(t(1:length(double(BiosoundObj.to)))*10^3)==round(double(BiosoundObj.to)*10^3)))
%             warning('Unexpected difference in time points')
%             TimePoint2fix = find(~(round(t(1:length(double(BiosoundObj.to)))*10^3)==round(double(BiosoundObj.to)*10^3)));
%             if isnan(t(TimePoint2fix))
%                 TO = double(BiosoundObj.to);
%                 t(TimePoint2fix) = TO(TimePoint2fix);
%             else
%                 SalB = double(BiosoundObj.sal); %#ok<NASGU>
%                 TO = double(BiosoundObj.to); %#ok<NASGU>
%                 keyboard
%             end
%         end
        
        
        
        % Add some fields to our output
        BioSoundObj.samprate = double(BiosoundObj.samprate);
        BioSoundObj.AmpPeriodF = AmpPeriodF;
        BioSoundObj.AmpPeriodP = AmpPeriodP;
        BioSoundObj.SpectralMean = SpectralMean;
        BioSoundObj.MeanSpectralMean = MeanSpectralMean;
        BioSoundObj.Q1t = Quartile_freq(1,:);
        BioSoundObj.Q2t = Quartile_freq(2,:);
        BioSoundObj.Q3t = Quartile_freq(3,:);
        BioSoundObj.MeanQ1t = MeanQuartile_Freq(:,1);
        BioSoundObj.MeanQ2t = MeanQuartile_Freq(:,2);
        BioSoundObj.MeanQ3t = MeanQuartile_Freq(:,3);
        %         BiosoundObj.SpectralMax = SpectralMax;
        % convert all nmpy arrays to double to be able to save as matfiles
        BioSoundObj.amp = SoundAmp;
        BioSoundObj.tAmp = double(BiosoundObj.tAmp);
        BioSoundObj.maxAmp = double(BiosoundObj.maxAmp);
        BioSoundObj.spectro = double(BiosoundObj.spectro);
        BioSoundObj.to = double(BiosoundObj.to);
        BioSoundObj.fo = double(BiosoundObj.fo);
%         BiosoundObj.F1 = double(BiosoundObj.F1);
        BioSoundObj.F1 = F1;
        BioSoundObj.MeanF1 = MeanF1;
%         BiosoundObj.F2 = double(BiosoundObj.F2);
        BioSoundObj.F2 = F2;
        BioSoundObj.MeanF2 = MeanF2;
%         BiosoundObj.F3 = double(BiosoundObj.F3);
        BioSoundObj.F3 = F3;
        BioSoundObj.MeanF3 = MeanF3;
        BioSoundObj.fpsd = double(BiosoundObj.fpsd);
        BioSoundObj.psd = double(BiosoundObj.psd);
%         BiosoundObj.sal = double(BiosoundObj.sal);
        BioSoundObj.sal = Sal;
        BioSoundObj.MeanSal = MeanSal;
%         BiosoundObj.f0 = double(BiosoundObj.f0);
        BioSoundObj.f0 = Fund;
        BioSoundObj.MeanF0 = MeanFund;
%         BiosoundObj.f0_2 = double(BiosoundObj.f0_2);
        BioSoundObj.f0_2 = Fund2;
        BioSoundObj.minf0 = double(BiosoundObj.minfund);
        BioSoundObj.maxf0 = double(BiosoundObj.maxfund);
        BioSoundObj.cvfund = double(BiosoundObj.cvfund);
        BioSoundObj.voice2percent = double(BiosoundObj.voice2percent);
        BioSoundObj.sound = double(BiosoundObj.sound);
        if isnan(Y2)
            BioSoundObj.mps = double(BiosoundObj.mps);
            BioSoundObj.wf = double(BiosoundObj.wf);
            BioSoundObj.wt = double(BiosoundObj.wt);
        else
            BioSoundObj.mps = double(BiosoundObj2.mps);
            BioSoundObj.wf = double(BiosoundObj2.wf);
            BioSoundObj.wt = double(BiosoundObj2.wt);
        end
        BioSoundObj.hashid = double(BiosoundObj.hashid);
    end

    function plotBiosound(BiosoundObj, F_high, Sound2,FormantPlot)
        if nargin<3
            Sound2 = []; % when the time window for analysis is enlarged to calculate the MPS
        end
        if nargin<4
            FormantPlot=1;
        end
        % Plot the results of biosound calculations
        ss1 = subplot(3,1,1);
        ColorCode = get(groot,'DefaultAxesColorOrder');
        DBNOISE =50;
        f_low = 0;
        logB = BiosoundObj.spectro;
        maxB = max(max(logB));
        minB = maxB-DBNOISE;
        
        imagesc(double(BiosoundObj.to)*1000,double(BiosoundObj.fo),logB);          % to is in seconds
        axis xy;
        caxis('manual');
        caxis([minB maxB]);
        cmap = spec_cmap();
        colormap(cmap);
        %         colorbar()
        
        v_axis = axis;
        v_axis(3)=f_low;
        v_axis(4)=F_high;
        axis(v_axis);
        xlabel('time (ms)'), ylabel('Frequency');
        
        hold on
        plot(double(BiosoundObj.to)*1000,double(BiosoundObj.SpectralMean),'k-','LineWidth',2)
        hold on
        plot(double(BiosoundObj.to)*1000,double(BiosoundObj.Q2t),'Color',ColorCode(6,:),'LineWidth',2)
        
        % Plot the fundamental and formants if they were calculated
        %     if double(BiosoundFi.sal)>MinSaliency
        Legend = {sprintf('SpecMean %.1fHz', mean(double(BiosoundObj.SpectralMean), 'omitnan')) sprintf('SpecMed %.1fHz',mean(double(BiosoundObj.Q2t), 'omitnan'))  sprintf('F0 %.1fHz', mean(double(BiosoundObj.f0),'omitnan')) 'Formant1' 'Formant2' 'Formant3'};
        IndLegend = [1 2];
        if ~isempty(double(BiosoundObj.f0))
            hold on
            plot(double(BiosoundObj.to)*1000,double(BiosoundObj.f0),'r-','LineWidth',2)
            IndLegend = [IndLegend 3];
        end
        if FormantPlot
            hold on
            plot(double(BiosoundObj.to)*1000,double(BiosoundObj.F1),'Color',ColorCode(4,:),'LineWidth',2)
            hold on
            plot(double(BiosoundObj.to)*1000,double(BiosoundObj.F2),'Color',ColorCode(2,:),'LineWidth',2)
            hold on
            if any(~isnan(double(BiosoundObj.F3)))
                plot(double(BiosoundObj.to)*1000,double(BiosoundObj.F3),'Color',ColorCode(7,:),'LineWidth',2)
                IndLegend = [IndLegend 4:6];
            else
                IndLegend = [IndLegend 4:5];
            end
        end
        
        yyaxis right
        hold on
        plot(double(BiosoundObj.to)*1000,double(BiosoundObj.sal),'m-','LineWidth',2)
        legend([Legend(IndLegend) sprintf('Pitch Sal %.2f', mean(double(BiosoundObj.sal), 'omitnan'))], 'Location','southoutside','NumColumns',length(IndLegend)+1)
%         hold on
%         plot(double(BiosoundObj.to)*1000,double(BiosoundObj.sal2),'m--','LineWidth',2)
        ylabel('Pitch Saliency')
        ylim([0 1])
        ss1.YColor = 'm';
        hold off
        
        ss2=subplot(3,1,2);
        yyaxis left
%         if ~isempty(Sound2)
%             Sound = Sound2;
%         else
            Sound = double(BiosoundObj.sound);
%         end
        plot((1:length(Sound))/BiosoundObj.samprate*1000,Sound, 'k-','LineWidth',2)
        hold on
        YLIM = get(gca,'YLim');
        YLIM = max(abs(YLIM)).*[-1 1];
        set(gca, 'YLim', YLIM)
        SoundAmp = double(py.array.array('d', py.numpy.nditer(BiosoundObj.amp)));
        ss2.YColor = 'k';
         % Plot the onsets and offsets of each sound element according to
        % Piezo manual curation
        if isfield(BiosoundObj, 'OnOffSets_elmts')
            for Ne = 1:size(BiosoundObj.OnOffSets_elmts,1)
                ColorInd = rem(Ne,size(ColorCode,1));
                if ColorInd==0
                    ColorInd = size(ColorCode,1);
                end
                MaxX = min(length(Sound),BiosoundObj.OnOffSets_elmts(Ne,2));
                plot((BiosoundObj.OnOffSets_elmts(Ne,1):MaxX)/BiosoundObj.samprate*1000,Sound(BiosoundObj.OnOffSets_elmts(Ne,1):MaxX),'LineStyle','-','LineWidth',2,'Color',ColorCode(ColorInd,:), 'DisplayName',sprintf('Elmt %d',Ne))
            end
            legend('AutoUpdate', 'Off')
        end
        
        yyaxis right
        plot(double(BiosoundObj.tAmp)*1000,double(SoundAmp), 'r-', 'LineWidth',2)
        YLIM = get(gca,'YLim');
        YLIM = max(abs(YLIM)).*[-1 1];
        set(gca, 'YLim', YLIM)
        set(gca, 'XLim', v_axis(1:2))
        xlabel('Time (ms)')
        ylabel('sound amplitude')
        if ~isempty(Sound2)
            title(sprintf('AmpPeriodicity = %.3f AmpPF = %.1f Hz  Note: Sound enlarged for MPS calculations',BiosoundObj.AmpPeriodP, BiosoundObj.AmpPeriodF))
        else
            title(sprintf('AmpPeriodicity = %.3f AmpPF = %.1f Hz',BiosoundObj.AmpPeriodP, BiosoundObj.AmpPeriodF))
        end
        ss2.YColor = 'r';
        hold off

        subplot(3,1,3);
        DBNOISE=60;
        YLim = [0 max(BiosoundObj.wf*10^3)];
%         XLim = [min(BiosoundObj.wt) max(BiosoundObj.wt)];
        XLim = [-300 300];
        Wf_i = logical((BiosoundObj.wf*10^3>=YLim(1)).* (BiosoundObj.wf*10^3<=YLim(2)));
        Wt_i = logical((BiosoundObj.wt>=XLim(1)).* (BiosoundObj.wt<=XLim(2)));
        BiosoundObj.mps = BiosoundObj.mps(Wf_i, Wt_i);
        Wf_local = BiosoundObj.wf(Wf_i);
        Wt_local = BiosoundObj.wt(Wt_i);
        MPS4plot = 10*log10(BiosoundObj.mps);
        MaxMPS = max(max(MPS4plot));
        MinMPS = MaxMPS-DBNOISE;
        MPS4plot(MPS4plot < MinMPS) = MinMPS;
        Im = imagesc(MPS4plot);
        axis xy
        colormap(Im.Parent,'jet');
        colorbar()
        xlabel('Temporal Frequency (Hz)')
        ylabel('Spectral Frequency (Cycles/kHz)')
        % get nice X and y tick labels
        MaxWf = max(floor(Wf_local*10^3));
        YTickLabel=0:MaxWf;
        YTick = nan(length(YTickLabel),1);
        for yy=1:length(YTick)
            YTick(yy) = find(floor(Wf_local*10^3)==YTickLabel(yy),1);
        end
        set(gca, 'YTickLabel', YTickLabel, 'YTick', YTick)
        MaxWt = max(floor(Wt_local*10^-2))*10^2;
        XTickLabel = -MaxWt:100:MaxWt;
        XTick = nan(length(XTickLabel),1);
        for xx=1:length(XTick)
            [~,XTick(xx)] = min(abs(round(Wt_local)-XTickLabel(xx)));
        end
        set(gca, 'XTickLabel',XTickLabel, 'XTick', XTick)
    end


    function plotCallDynamic(BiosoundRaw, BiosoundPiezo)
        Span = 9;% Span is an unevennumber. smooth has a default span of 5 points = 5ms However end points are unchanged...
        HalfSpan = (Span-1)/2;
        % Plot the pitch saliency vs amplitude on microphone
        subplot(4,1,1)
        Saliency = mysmooth(double(BiosoundRaw.sal), Span);
        TimeSound = double(BiosoundRaw.to)*1000;
        TimeSound = TimeSound./max(TimeSound);
        cmap = colormap('jet');
        ncolors = length(cmap);
        nx = length(Saliency);
        
        for ii=HalfSpan:nx-HalfSpan
            segcolor = cmap(fix((TimeSound(ii)+TimeSound(ii+1))*ncolors./3)+1,:);
            plot([Saliency(ii), Saliency(ii+1)], [BiosoundRaw.amp(ii), BiosoundRaw.amp(ii+1)], "Color",segcolor, "LineWidth",2);
            hold on;
        end
        set(gca,'XLim',[0 1]);
        xlabel(sprintf('Pitch Saliency %.1f', double(BiosoundRaw.meansal)))
        ylabel('Amplitude')
        
        % Plot the difference of formants (Mic data) vs sound amplitude (Mic
        % Data)
        subplot(4,1,2)
        SoundSpeed = 350;
        F1 = double(BiosoundRaw.F1);
        F2 = double(BiosoundRaw.F2);
        FormantDisp = mysmooth(SoundSpeed./(2*(F2 - F1))*1000, Span);
        nx = length(FormantDisp);
        
        
        for ii=HalfSpan:nx-HalfSpan
            segcolor = cmap(fix((TimeSound(ii)+TimeSound(ii+1))*ncolors./3)+1,:);
            plot([FormantDisp(ii), FormantDisp(ii+1)], [BiosoundRaw.amp(ii), BiosoundRaw.amp(ii+1)], "Color",segcolor, "LineWidth",2);
            hold on;
        end
        set(gca,'XLim',[10 150])
        xlabel('1/Formant disp (vocal tract length (mm))')
        ylabel('Amplitude')
        
        % Plot the amplitude (Mic data) vs fundamental (Piezo
        % Data)
        subplot(4,1,3)
        SoundFund = mysmooth(double(BiosoundPiezo.f0), Span);
        if ~isempty(SoundFund)
            for ii=HalfSpan:nx-HalfSpan
                segcolor = cmap(fix((TimeSound(ii)+TimeSound(ii+1))*ncolors./3)+1,:);
                plot([SoundFund(ii), SoundFund(ii+1)], [BiosoundRaw.amp(ii), BiosoundRaw.amp(ii+1)], "Color",segcolor, "LineWidth",2);
                hold on;
            end
            ylabel('Amplitude')
            xlabel(sprintf('Fundamental (Hz), %.1f Hz', mean(double(BiosoundPiezo.f0), 'omitnan')))
            set(gca,'XLim',[200 3000])
        end
        
        % Plot the Amplitude (Mic data) vs SpectralMean (Mic
        % Data)
        subplot(4,1,4)
        SoundSpecMean = mysmooth(double(BiosoundRaw.SpectralMean), Span);
        if ~isempty(SoundSpecMean)
            for ii=HalfSpan:nx-HalfSpan
                segcolor = cmap(fix((TimeSound(ii)+TimeSound(ii+1))*ncolors./3)+1,:);
                plot([SoundSpecMean(ii), SoundSpecMean(ii+1)], [BiosoundRaw.amp(ii), BiosoundRaw.amp(ii+1)], "Color",segcolor, "LineWidth",2);
                hold on;
            end
            ylabel('Amplitude')
            xlabel(sprintf('Spectral Mean (Hz), %.1f Hz', mean(double(BiosoundRaw.SpectralMean),'omitnan')))
            set(gca,'XLim',[25000 30000])
        end
        
        %         % Plot the Amplitude (Mic data) vs Spectral Max (Piezo
        %         % Data)
        %         subplot(5,1,5)
        %         SoundSpecMax = mysmooth(double(BiosoundPiezo.SpectralMax), Span);
        %         if ~isempty(SoundSpecMax)
        %             for ii=HalfSpan:nx-HalfSpan
        %                 segcolor = cmap(fix((TimeSound(ii)+TimeSound(ii+1))*ncolors./3)+1,:);
        %                 plot([SoundSpecMax(ii), SoundSpecMax(ii+1)], [BiosoundRaw.amp(ii), BiosoundRaw.amp(ii+1)], "Color",segcolor, "LineWidth",2);
        %                 hold on;
        %             end
        %             ylabel('Amplitude')
        %             xlabel(sprintf('Spectral Max (Hz), %.1f Hz', nanmean(double(BiosoundPiezo.SpectralMax))))
        %             set(gca,'XLim',[0 10000])
        %         end
        
    end

    function outyy = mysmooth(yy,Span)
        if nargin<2
            Span = 5;
        end
        outyy=nan(size(yy));
        for ii=1:length(yy)
            if ii==1 || ii==length(yy)
                outyy(ii) = yy(ii);
            elseif ii<=((Span-1)/2)
                HalfSpan = ii-1;
                outyy(ii) = mean(yy(1:(ii+HalfSpan)),'omitnan');
            elseif (length(yy)-ii) <= ((Span-1)/2)
                HalfSpan = length(yy)-ii;
                outyy(ii) = mean(yy((ii-HalfSpan):end),'omitnan');
            else
                HalfSpan = (Span-1)/2;
                outyy(ii) = mean(yy((ii-HalfSpan):(ii+HalfSpan)),'omitnan');
            end
        end
    end



end


